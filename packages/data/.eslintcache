[{"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/.eslintrc.js":"1","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/.prettierrc.js":"2","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/.template-lintrc.js":"3","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/addon/adapters/dimensions/keg.js":"4","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/addon/builder/request.js":"5","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/addon/mirage/routes/bard-meta.js":"6","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/addon/mirage/routes/graphql.js":"7","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/addon/models/legacy-bard-dimension.js":"8","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/addon/serializers/metadata/metric.js":"9","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/addon/utils/dimension.js":"10","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/addon/utils/pagination.js":"11","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/addon/utils/search.js":"12","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/addon-test-support/helpers/metadata-routes.js":"13","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/adapters/dimensions/bard.js":"14","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/adapters/dimensions/elide.js":"15","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/adapters/dimensions/keg.js":"16","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/adapters/facts/bard.js":"17","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/adapters/facts/elide.js":"18","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/adapters/metadata/bard.js":"19","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/adapters/metadata/elide.js":"20","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/builder/request.js":"21","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/models/bard-dimension-array.js":"22","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/models/legacy-bard-dimension.js":"23","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/models/metadata/bard/table.js":"24","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/models/metadata/column-function.js":"25","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/models/metadata/column.js":"26","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/models/metadata/dimension.js":"27","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/models/metadata/elide/dimension.js":"28","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/models/metadata/function-parameter.js":"29","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/models/metadata/metric.js":"30","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/models/metadata/request-constraint.js":"31","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/models/metadata/table.js":"32","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/models/metadata/time-dimension.js":"33","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/models/navi-dimension.js":"34","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/models/navi-facts.js":"35","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/serializers/bard-dimensions.js":"36","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/serializers/dimensions/bard.js":"37","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/serializers/dimensions/elide.js":"38","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/serializers/facts/bard.js":"39","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/serializers/facts/elide.js":"40","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/serializers/metadata/bard.js":"41","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/serializers/metadata/column-function.js":"42","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/serializers/metadata/elide.js":"43","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/services/bard-dimensions.js":"44","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/services/keg.js":"45","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/services/navi-dimension.js":"46","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/services/navi-elide-apollo.js":"47","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/services/navi-facts.js":"48","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/services/navi-formatter.js":"49","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/services/navi-metadata.js":"50","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/services/request-decorator.js":"51","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/utils/classes/duration.js":"52","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/utils/classes/interval.js":"53","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/utils/date.js":"54","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/utils/dimension.js":"55","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/utils/duration-utils.js":"56","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/utils/enums/cardinality-sizes.js":"57","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/utils/metric.js":"58","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/utils/pagination.js":"59","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/utils/search.js":"60","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/config/coverage.js":"61","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/config/ember-try.js":"62","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/config/environment.js":"63","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/ember-cli-build.js":"64","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/index.js":"65","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/testem.js":"66","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/tests/dummy/app/app.js":"67","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/tests/dummy/app/router.js":"68","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/tests/dummy/config/environment.js":"69","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/tests/dummy/config/targets.js":"70","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/tests/dummy/mirage/config.js":"71","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/tests/dummy/mirage/factories/async-query.js":"72","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/tests/dummy/mirage/factories/dimension.js":"73","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/tests/dummy/mirage/factories/metric.js":"74","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/tests/dummy/mirage/factories/table.js":"75","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/tests/dummy/mirage/factories/time-dimension-grain.js":"76","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/tests/dummy/mirage/factories/time-dimension.js":"77","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/tests/unit/adapters/dimensions/keg-test.js":"78","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/tests/unit/builder/request-test.js":"79","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/tests/unit/models/bard-dimension-array.js":"80","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/tests/unit/models/legacy-bard-dimension-test.js":"81","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/tests/unit/models/navi-facts.js":"82","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/tests/unit/services/bard-dimensions-test.js":"83","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/tests/unit/services/keg-test.js":"84","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/tests/unit/services/navi-elide-apollo-test.js":"85","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/tests/unit/utils/adapter-test.js":"86","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/tests/unit/utils/metric-test.js":"87","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/tests/unit/utils/pagination-test.js":"88","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/tests/unit/utils/search-test.js":"89"},{"size":1762,"mtime":1618256664860,"results":"90","hashOfConfig":"91"},{"size":136,"mtime":1618256664862,"results":"92","hashOfConfig":"91"},{"size":58,"mtime":1615310652537,"results":"93","hashOfConfig":"91"},{"size":7674,"mtime":1615310652539,"results":"94","hashOfConfig":"91"},{"size":7208,"mtime":1615310652560,"results":"95","hashOfConfig":"91"},{"size":3427,"mtime":1615310652568,"results":"96","hashOfConfig":"91"},{"size":19783,"mtime":1615310652569,"results":"97","hashOfConfig":"91"},{"size":1056,"mtime":1615310652570,"results":"98","hashOfConfig":"91"},{"size":1369,"mtime":1615310652576,"results":"99","hashOfConfig":"91"},{"size":924,"mtime":1615310652579,"results":"100","hashOfConfig":"91"},{"size":973,"mtime":1615310652580,"results":"101","hashOfConfig":"91"},{"size":3703,"mtime":1615310652581,"results":"102","hashOfConfig":"91"},{"size":8912,"mtime":1615310652538,"results":"103","hashOfConfig":"91"},{"size":62,"mtime":1615310652581,"results":"104","hashOfConfig":"91"},{"size":63,"mtime":1615310652581,"results":"105","hashOfConfig":"91"},{"size":61,"mtime":1615310652582,"results":"106","hashOfConfig":"91"},{"size":57,"mtime":1615310652582,"results":"107","hashOfConfig":"91"},{"size":58,"mtime":1615310652582,"results":"108","hashOfConfig":"91"},{"size":60,"mtime":1615310652582,"results":"109","hashOfConfig":"91"},{"size":61,"mtime":1615310652582,"results":"110","hashOfConfig":"91"},{"size":53,"mtime":1615310652583,"results":"111","hashOfConfig":"91"},{"size":65,"mtime":1615310652584,"results":"112","hashOfConfig":"91"},{"size":66,"mtime":1615310652584,"results":"113","hashOfConfig":"91"},{"size":64,"mtime":1615310652584,"results":"114","hashOfConfig":"91"},{"size":69,"mtime":1615310652584,"results":"115","hashOfConfig":"91"},{"size":60,"mtime":1615310652585,"results":"116","hashOfConfig":"91"},{"size":63,"mtime":1615310652585,"results":"117","hashOfConfig":"91"},{"size":69,"mtime":1615310652585,"results":"118","hashOfConfig":"91"},{"size":72,"mtime":1615310652585,"results":"119","hashOfConfig":"91"},{"size":60,"mtime":1615310652585,"results":"120","hashOfConfig":"91"},{"size":72,"mtime":1615310652586,"results":"121","hashOfConfig":"91"},{"size":59,"mtime":1615310652586,"results":"122","hashOfConfig":"91"},{"size":68,"mtime":1615310652586,"results":"123","hashOfConfig":"91"},{"size":59,"mtime":1615310652586,"results":"124","hashOfConfig":"91"},{"size":55,"mtime":1615310652586,"results":"125","hashOfConfig":"91"},{"size":65,"mtime":1615310652587,"results":"126","hashOfConfig":"91"},{"size":65,"mtime":1615310652587,"results":"127","hashOfConfig":"91"},{"size":66,"mtime":1615310652587,"results":"128","hashOfConfig":"91"},{"size":60,"mtime":1615310652587,"results":"129","hashOfConfig":"91"},{"size":61,"mtime":1615310652588,"results":"130","hashOfConfig":"91"},{"size":63,"mtime":1615310652588,"results":"131","hashOfConfig":"91"},{"size":74,"mtime":1615310652588,"results":"132","hashOfConfig":"91"},{"size":64,"mtime":1615310652588,"results":"133","hashOfConfig":"91"},{"size":62,"mtime":1615310652588,"results":"134","hashOfConfig":"91"},{"size":50,"mtime":1615310652589,"results":"135","hashOfConfig":"91"},{"size":61,"mtime":1615310652589,"results":"136","hashOfConfig":"91"},{"size":64,"mtime":1615310652589,"results":"137","hashOfConfig":"91"},{"size":57,"mtime":1615310652589,"results":"138","hashOfConfig":"91"},{"size":61,"mtime":1615310652589,"results":"139","hashOfConfig":"91"},{"size":60,"mtime":1615310652590,"results":"140","hashOfConfig":"91"},{"size":64,"mtime":1615310652590,"results":"141","hashOfConfig":"91"},{"size":60,"mtime":1615310652590,"results":"142","hashOfConfig":"91"},{"size":60,"mtime":1615310652590,"results":"143","hashOfConfig":"91"},{"size":48,"mtime":1615310652591,"results":"144","hashOfConfig":"91"},{"size":53,"mtime":1615310652591,"results":"145","hashOfConfig":"91"},{"size":58,"mtime":1615310652591,"results":"146","hashOfConfig":"91"},{"size":67,"mtime":1615310652591,"results":"147","hashOfConfig":"91"},{"size":50,"mtime":1615310652592,"results":"148","hashOfConfig":"91"},{"size":54,"mtime":1615310652592,"results":"149","hashOfConfig":"91"},{"size":50,"mtime":1615310652592,"results":"150","hashOfConfig":"91"},{"size":61,"mtime":1615310652592,"results":"151","hashOfConfig":"91"},{"size":1667,"mtime":1618256664868,"results":"152","hashOfConfig":"91"},{"size":220,"mtime":1615310652593,"results":"153","hashOfConfig":"91"},{"size":532,"mtime":1615310652593,"results":"154","hashOfConfig":"91"},{"size":1558,"mtime":1615310652593,"results":"155","hashOfConfig":"91"},{"size":589,"mtime":1615310652597,"results":"156","hashOfConfig":"91"},{"size":388,"mtime":1618256664871,"results":"157","hashOfConfig":"91"},{"size":256,"mtime":1618256664871,"results":"158","hashOfConfig":"91"},{"size":1804,"mtime":1615310652600,"results":"159","hashOfConfig":"91"},{"size":305,"mtime":1618256664872,"results":"160","hashOfConfig":"91"},{"size":636,"mtime":1615310652601,"results":"161","hashOfConfig":"91"},{"size":66,"mtime":1615310652601,"results":"162","hashOfConfig":"91"},{"size":64,"mtime":1615310652601,"results":"163","hashOfConfig":"91"},{"size":61,"mtime":1615310652601,"results":"164","hashOfConfig":"91"},{"size":60,"mtime":1615310652601,"results":"165","hashOfConfig":"91"},{"size":75,"mtime":1615310652602,"results":"166","hashOfConfig":"91"},{"size":69,"mtime":1615310652602,"results":"167","hashOfConfig":"91"},{"size":7591,"mtime":1615310652604,"results":"168","hashOfConfig":"91"},{"size":8715,"mtime":1615310652606,"results":"169","hashOfConfig":"91"},{"size":2562,"mtime":1618256664876,"results":"170","hashOfConfig":"91"},{"size":1166,"mtime":1615310652607,"results":"171","hashOfConfig":"91"},{"size":1900,"mtime":1615310652610,"results":"172","hashOfConfig":"91"},{"size":33600,"mtime":1615310652612,"results":"173","hashOfConfig":"91"},{"size":17178,"mtime":1615310652613,"results":"174","hashOfConfig":"91"},{"size":487,"mtime":1615310652613,"results":"175","hashOfConfig":"91"},{"size":3194,"mtime":1615310652615,"results":"176","hashOfConfig":"91"},{"size":7891,"mtime":1615310652616,"results":"177","hashOfConfig":"91"},{"size":2147,"mtime":1615310652616,"results":"178","hashOfConfig":"91"},{"size":4504,"mtime":1615310652617,"results":"179","hashOfConfig":"91"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1hr38nn",{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"194","messages":"195","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"323","messages":"324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"331","messages":"332","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"335","messages":"336","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"337"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"340","messages":"341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"342","messages":"343","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"344","messages":"345","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"346","messages":"347","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"348","messages":"349","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"350"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"353","messages":"354","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"355","messages":"356","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"357","messages":"358","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"359","messages":"360","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/.eslintrc.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/.prettierrc.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/.template-lintrc.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/addon/adapters/dimensions/keg.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/addon/builder/request.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/addon/mirage/routes/bard-meta.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/addon/mirage/routes/graphql.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/addon/models/legacy-bard-dimension.js",["361"],"/**\n * Copyright 2019, Yahoo Holdings Inc.\n * Licensed under the terms of the MIT license. See accompanying LICENSE.md file for terms.\n *\n * Description: A model that holds a dimension value response.\n */\nimport EmberObject from '@ember/object';\n\nexport default EmberObject.extend({\n  /**\n   * Test to see if the dimension is considered the same as the other\n   * @override\n   * @param {BardDimension} other - another model to test for equality\n   * @returns {Boolean} - if the object can be considered equal\n   */\n  isEqual(other) {\n    const idField = this.constructor.identifierField || 'id';\n    return this[idField] === other[idField];\n  },\n}).reopenClass({\n  /**\n   * @property {String} identifierField - name of the dimension identifier field\n   */\n  identifierField: 'id',\n\n  /**\n   * @property {String} dimensionName - name of the dimension\n   */\n  dimensionName: undefined,\n\n  /**\n   * @method toString\n   * @returns {String} description of model factory\n   */\n  toString() {\n    return `dimension model factory: ${this.dimensionName}`;\n  },\n});\n","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/addon/serializers/metadata/metric.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/addon/utils/dimension.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/addon/utils/pagination.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/addon/utils/search.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/addon-test-support/helpers/metadata-routes.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/adapters/dimensions/bard.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/adapters/dimensions/elide.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/adapters/dimensions/keg.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/adapters/facts/bard.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/adapters/facts/elide.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/adapters/metadata/bard.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/adapters/metadata/elide.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/builder/request.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/models/bard-dimension-array.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/models/legacy-bard-dimension.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/models/metadata/bard/table.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/models/metadata/column-function.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/models/metadata/column.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/models/metadata/dimension.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/models/metadata/elide/dimension.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/models/metadata/function-parameter.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/models/metadata/metric.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/models/metadata/request-constraint.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/models/metadata/table.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/models/metadata/time-dimension.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/models/navi-dimension.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/models/navi-facts.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/serializers/bard-dimensions.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/serializers/dimensions/bard.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/serializers/dimensions/elide.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/serializers/facts/bard.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/serializers/facts/elide.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/serializers/metadata/bard.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/serializers/metadata/column-function.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/serializers/metadata/elide.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/services/bard-dimensions.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/services/keg.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/services/navi-dimension.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/services/navi-elide-apollo.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/services/navi-facts.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/services/navi-formatter.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/services/navi-metadata.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/services/request-decorator.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/utils/classes/duration.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/utils/classes/interval.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/utils/date.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/utils/dimension.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/utils/duration-utils.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/utils/enums/cardinality-sizes.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/utils/metric.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/utils/pagination.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/app/utils/search.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/config/coverage.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/config/ember-try.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/config/environment.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/ember-cli-build.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/index.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/testem.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/tests/dummy/app/app.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/tests/dummy/app/router.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/tests/dummy/config/environment.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/tests/dummy/config/targets.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/tests/dummy/mirage/config.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/tests/dummy/mirage/factories/async-query.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/tests/dummy/mirage/factories/dimension.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/tests/dummy/mirage/factories/metric.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/tests/dummy/mirage/factories/table.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/tests/dummy/mirage/factories/time-dimension-grain.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/tests/dummy/mirage/factories/time-dimension.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/tests/unit/adapters/dimensions/keg-test.js",["362","363"],"import EmberObject from '@ember/object';\nimport { assign } from '@ember/polyfills';\nimport { module, test } from 'qunit';\nimport { setupTest } from 'ember-qunit';\nimport metadataRoutes from 'navi-data/test-support/helpers/metadata-routes';\nimport Pretender from 'pretender';\n\nconst Response1 = {\n  rows: [\n    { id: 1, description: 'foo', meta: 'ember' },\n    { id: 2, description: 'bar', meta: 'bard' },\n    { id: 3, description: 'gar', meta: 'navi' },\n  ],\n};\n\nconst MetaObj = {\n  meta: {\n    pagination: {\n      rowsPerPage: 3,\n      numberOfResults: 3,\n      currentPage: 1,\n    },\n  },\n};\n\nconst Response2 = assign(MetaObj, Response1);\n\nconst Record1 = { id: 1, description: 'foo', meta: 'ember' },\n  Record2 = { id: 2, description: 'bar', meta: 'bard' },\n  Record3 = { id: 3, description: 'gar', meta: 'navi' },\n  Records = [Record1, Record2, Record3];\n\nlet Adapter, Keg, Server;\n\nmodule('Unit | Adapters | Dimensions | Keg', function (hooks) {\n  setupTest(hooks);\n\n  hooks.beforeEach(function () {\n    this.owner.register('model:dimension/bardOne.dimensionOne', EmberObject.extend({ name: 'dimensionOne' }));\n    this.owner.register('model:dimension/bardTwo.dimensionFour', EmberObject.extend({ name: 'dimensionFour' }));\n\n    Adapter = this.owner.lookup('adapter:dimensions/keg');\n\n    Keg = Adapter.keg;\n    Keg.pushMany('dimension/bardOne.dimensionOne', Records, { namespace: 'bardOne' });\n    Keg.pushMany(\n      'dimension/bardTwo.dimensionFour',\n      [\n        { id: 1, description: 'one' },\n        { id: 2, description: 'two' },\n      ],\n      {\n        namespace: 'bardTwo',\n      }\n    );\n\n    //Load metadata\n    Server = new Pretender(metadataRoutes);\n    metadataRoutes.bind(Server)(1);\n\n    return Promise.all([\n      this.owner.lookup('service:navi-metadata').loadMetadata(),\n      this.owner.lookup('service:navi-metadata').loadMetadata({ dataSourceName: 'bardTwo' }),\n    ]);\n  });\n\n  hooks.afterEach(function () {\n    Server.shutdown();\n  });\n\n  test('_buildResponse', function (assert) {\n    assert.expect(2);\n\n    assert.deepEqual(\n      Adapter._buildResponse(Records),\n      Response1,\n      '_buildResponse correctly built the response for the provided records'\n    );\n\n    assert.deepEqual(\n      Adapter._buildResponse(Records, { page: 1, perPage: 3 }),\n      Response2,\n      '_buildResponse correctly built the response with pagination options for the provided records'\n    );\n  });\n\n  test('all', async function (assert) {\n    assert.expect(3);\n\n    const result = await Adapter.all('dimensionOne');\n    assert.deepEqual(\n      result.rows.mapBy('id'),\n      [1, 2, 3],\n      'all() contains the expected response object for Test dimension without any filters'\n    );\n\n    const bardTwoResult = await Adapter.all('dimensionFour', { dataSourceName: 'bardTwo' });\n    assert.deepEqual(\n      bardTwoResult.rows.mapBy('id'),\n      [1, 2],\n      'all() contains the expected response object for bardTwo dimension without any filters'\n    );\n\n    const nonFoundResult = await Adapter.all('dimensionFour');\n    assert.deepEqual(nonFoundResult.rows.mapBy('id'), [], \"all() returns empty array when dimension can't be found\");\n  });\n\n  test('find', async function (assert) {\n    assert.expect(9);\n\n    const assertThrowOperator = (query) => {\n      assert.throws(\n        () => {\n          Adapter.find('dimensionOne', query);\n        },\n        /Only 'in' operation is currently supported in Keg/,\n        'throws error when doing a contains search, which is not supported yet'\n      );\n    };\n    assertThrowOperator({ operator: 'contains' });\n    assertThrowOperator([{ operator: 'contains' }]);\n    assertThrowOperator([{}, { operator: 'in' }, { operator: 'contains' }]);\n\n    const assertEquals = (expected, message) => (result) => {\n      assert.deepEqual(result.rows.mapBy('id'), expected, message);\n    };\n\n    await Adapter.find('dimensionOne', {\n      field: 'description',\n      values: 'bar,gar',\n    }).then(assertEquals([2, 3], 'find() returns expected when values is a string'));\n    await Adapter.find('dimensionOne', [\n      {\n        field: 'description',\n        values: 'bar,gar',\n      },\n    ]).then(assertEquals([2, 3], 'find() returns expected when passed an array of queries'));\n    await Adapter.find('dimensionOne', [\n      {\n        field: 'description',\n        values: ['bar', 'gar'],\n      },\n    ]).then(assertEquals([2, 3], 'find() returns expected when values is an array'));\n    await Adapter.find('dimensionOne', [\n      { field: 'id', values: [1, 2, 3] },\n      { field: 'description', values: ['bar'] },\n    ]).then(assertEquals([2], 'find() returns expected when passed multiple filters'));\n    await Adapter.find('dimensionOne', [\n      { field: 'id', values: [1, 2, 3] },\n      { field: 'id', values: [3, 4] },\n      { field: 'description', values: ['bar', 'gar'] },\n    ]).then(assertEquals([3], 'find() returns expected when passed multiple overlapping filters'));\n\n    await Adapter.find('dimensionFour', [{ field: 'description', values: ['two'] }], {\n      dataSourceName: 'bardTwo',\n    }).then(assertEquals([2], 'find() returns expected when using a dimension from a different data source'));\n  });\n\n  test('findById', async function (assert) {\n    assert.expect(2);\n\n    const result = await Adapter.findById('dimensionOne', '1');\n    assert.deepEqual(\n      result.id,\n      1,\n      'findById() returns the expected response object for Test dimension, identifierField and query'\n    );\n\n    const bardTwoResult = await Adapter.findById('dimensionFour', '1', 'bardTwo');\n    assert.deepEqual(\n      bardTwoResult.description,\n      'one',\n      'findById() returns the expected response object for the bardTwo sourced dimension'\n    );\n  });\n\n  test('getById', function (assert) {\n    assert.expect(4);\n\n    assert.deepEqual(\n      Adapter.getById('unknownDimensionName', '1'),\n      undefined,\n      'getById() returns undefined for an unknown dimension'\n    );\n\n    assert.deepEqual(\n      Adapter.getById('dimensionOne', 'unkownDimensionId'),\n      undefined,\n      'getById() returns undefined for an known dimension with an unknown id'\n    );\n\n    assert.deepEqual(\n      Adapter.getById('dimensionOne', '1').id,\n      1,\n      'getById() returns the expected response object for Test dimension, identifierField and query'\n    );\n\n    assert.deepEqual(\n      Adapter.getById('dimensionFour', '1', 'bardTwo').description,\n      'one',\n      'getById() returns the expected response object from a dimension in another namespace'\n    );\n  });\n\n  test('pushMany', function (assert) {\n    assert.expect(4);\n    Adapter.pushMany('dimensionOne', [\n      { id: 22, foo: 'bar' },\n      { id: 44, foo: 'baz' },\n    ]);\n    Adapter.pushMany(\n      'dimensionFour',\n      [\n        { id: 77, foo: 'quux' },\n        { id: 99, foo: 'plugh' },\n      ],\n      {\n        dataSourceName: 'bardTwo',\n      }\n    );\n\n    let { foo: bar } = Keg.getById('dimension/bardOne.dimensionOne', 22, 'bardOne');\n    assert.deepEqual(bar, 'bar', 'pushMany stores records into the keg');\n\n    let { foo: baz } = Keg.getById('dimension/bardOne.dimensionOne', 44, 'bardOne');\n    assert.deepEqual(baz, 'baz', 'pushMany stores records into the keg');\n\n    let { foo: quux } = Keg.getById('dimension/bardTwo.dimensionFour', 77, 'bardTwo');\n    assert.deepEqual(quux, 'quux', 'pushMany stores records into the keg from different datasource');\n\n    let { foo: plugh } = Keg.getById('dimension/bardTwo.dimensionFour', 99, 'bardTwo');\n    assert.deepEqual(plugh, 'plugh', 'pushMany stores records into the keg from different datasource');\n  });\n});\n","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/tests/unit/builder/request-test.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/tests/unit/models/bard-dimension-array.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/tests/unit/models/legacy-bard-dimension-test.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/tests/unit/models/navi-facts.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/tests/unit/services/bard-dimensions-test.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/tests/unit/services/keg-test.js",["364"],"import EmberObject, { set } from '@ember/object';\nimport { module, test } from 'qunit';\nimport { setupTest } from 'ember-qunit';\n\nlet Keg, Record1, Record2, Record3, RawRecord1, RawRecord2, RawRecord3, RecordFactory;\n\nmodule('Unit | Service | keg', function (hooks) {\n  setupTest(hooks);\n\n  hooks.beforeEach(function () {\n    Keg = this.owner.lookup('service:keg');\n\n    this.owner.register('model:record', EmberObject.extend());\n    RecordFactory = this.owner.factoryFor('model:record');\n\n    RawRecord1 = { id: 1, description: 'foo', meta: 'ember' };\n    RawRecord2 = { id: 2, description: 'bar', meta: 'bard' };\n    RawRecord3 = { id: 3, description: 'bar', meta: 'keg' };\n\n    Record1 = RecordFactory.create(RawRecord1);\n    Record2 = RecordFactory.create(RawRecord2);\n    Record3 = RecordFactory.create(RawRecord3);\n  });\n\n  test('_getFactoryForType returns factory for a model type', function (assert) {\n    assert.equal(\n      Keg._getFactoryForType('record'),\n      RecordFactory.class,\n      '_getFactoryForType returns factory of model type when type is registered'\n    );\n\n    let testType = {};\n    assert.equal(\n      Keg._getFactoryForType(testType),\n      testType,\n      '_getFactoryForType returns given type when type is not a string'\n    );\n  });\n\n  test('_getRecordKegForType returns a keg for a type', function (assert) {\n    const recordKeg = Keg._getRecordKegForType('record');\n    assert.deepEqual(recordKeg.toArray(), [], '_getRecordKegForType returns an empty array when called the first time');\n\n    //Mock a record insert\n    recordKeg.pushObject({ id: 1 });\n\n    assert.deepEqual(\n      Keg._getRecordKegForType('record').toArray(),\n      [{ id: 1 }],\n      '_getRecordKegForType returns the existing array when called after initially'\n    );\n  });\n\n  test('_getIdIndexForType returns an id index for a type', function (assert) {\n    const idIndex = Keg._getIdIndexForType('record');\n    assert.deepEqual(idIndex, {}, '_getIdIndexForType returns an empty object when called the first time');\n\n    //Mock a record insert\n    idIndex[1] = { id: 1 };\n\n    assert.deepEqual(\n      Keg._getIdIndexForType('record'),\n      { 1: { id: 1 } },\n      '_getIdIndexForType returns the existing object when called after initially'\n    );\n  });\n\n  test('reset clears all state of the keg', function (assert) {\n    set(Keg, 'recordKegs', { foo: 'bar' });\n    set(Keg, 'idIndexes', { foo: 'bar' });\n\n    Keg.reset();\n\n    assert.deepEqual(Keg.recordKegs, {}, 'reset resets recordKegs');\n\n    assert.deepEqual(Keg.idIndexes, {}, 'reset resets idIndexes');\n  });\n\n  test('reset by type clears one model type from the keg', function (assert) {\n    set(Keg, 'recordKegs', { foo: 'bar', ham: 'spam' });\n    set(Keg, 'idIndexes', { foo: 'bar', ham: 'spam' });\n\n    Keg.resetByType('foo');\n\n    assert.deepEqual(Keg.recordKegs, { foo: [], ham: 'spam' }, 'resets foo type, but leaves ham alone in recordKegs');\n\n    assert.deepEqual(Keg.idIndexes, { foo: {}, ham: 'spam' }, 'resets foo type, but leaves ham alone in idIndexes');\n  });\n\n  test('push inserts a record into the keg', function (assert) {\n    const pushedRecord = Keg.push('record', RawRecord1);\n    assert.ok(pushedRecord instanceof RecordFactory.class, 'push returns an instance of the given type');\n\n    assert.equal(pushedRecord.id, RawRecord1.id, 'The returned record has the correct id');\n\n    assert.equal(pushedRecord.description, RawRecord1.description, 'The returned record has the correct description');\n\n    assert.equal(Keg.recordKegs.record.firstObject, pushedRecord, 'The pushed record is registered in recordKeg');\n\n    assert.deepEqual(Keg.idIndexes.record, { 'navi.1': pushedRecord }, 'The pushed record is registered in idIndexes');\n\n    let foundRecord = Keg.getById('record', 1, 'navi');\n    assert.ok(foundRecord, 'after pushing a record it can be found');\n\n    assert.equal(pushedRecord, foundRecord, 'The pushed record is the same as the found record');\n  });\n\n  test('insert pushes a record into the keg', function (assert) {\n    const insertedRecord = Keg.insert('record', Record1);\n    assert.equal(Record1, insertedRecord, '`insert` returns the inserted record');\n\n    const foundRecord = Keg.getById('record', 1, 'navi');\n    assert.equal(Record1, foundRecord, 'after inserting a record it can be found');\n  });\n\n  test('pushing a record with an existing id update the record in the keg', function (assert) {\n    //Insert initial record\n    const pushedRecord = Keg.push('record', RawRecord1);\n\n    //Push new record with same id\n    Keg.push('record', { id: 1, description: 'updated' });\n\n    let fetchedRecord = Keg.getById('record', 1);\n\n    assert.deepEqual(\n      Keg.all('record'),\n      [pushedRecord],\n      'Pushing a record into the keg with an existing id does not add a new record'\n    );\n\n    assert.equal(pushedRecord, fetchedRecord, 'After update fetched record still the same object');\n\n    assert.equal(\n      fetchedRecord.description,\n      'updated',\n      'Pushing a record into the keg with an existing id updates the record'\n    );\n  });\n\n  test('inserting a record with an existing id update the record in the keg', function (assert) {\n    //Insert initial record\n    const insertedRecord = Keg.insert('record', Record1);\n\n    //Insert new record with same id\n    const newRecord = RecordFactory.create({ ...RawRecord1, description: 'updated' });\n    Keg.insert('record', newRecord);\n\n    let fetchedRecord = Keg.getById('record', 1);\n\n    assert.deepEqual(\n      Keg.all('record'),\n      [newRecord],\n      'Inserting a record into the keg with an existing id does not add a new record'\n    );\n\n    assert.equal(insertedRecord, fetchedRecord, 'After update fetched record still the same object');\n  });\n\n  test('push can take an explicit modelFactory', function (assert) {\n    const pushedRecord = Keg.push('notRecord', RawRecord1, {\n      modelFactory: 'record',\n    });\n\n    assert.ok(pushedRecord instanceof RecordFactory.class, 'push returns an object instance of the explicit type');\n  });\n\n  test('pushMany inserts many records into the keg', function (assert) {\n    const rawRecords = [RawRecord1, RawRecord2];\n    const pushedRecords = Keg.pushMany('record', rawRecords);\n\n    assert.ok(\n      pushedRecords.every((rec) => rec instanceof RecordFactory.class),\n      'pushMany returns an array of instances of the given type'\n    );\n\n    assert.deepEqual(pushedRecords.mapBy('id'), [1, 2], 'pushed records have the correct ids');\n\n    assert.deepEqual(\n      pushedRecords.mapBy('description'),\n      ['foo', 'bar'],\n      'pushed records have the correct descriptions'\n    );\n\n    let allRecords = Keg.all('record');\n    assert.ok(\n      pushedRecords.every((rec, idx) => pushedRecords[idx] === allRecords[idx]),\n      'The pushed records are the same as the fetched records'\n    );\n\n    assert.deepEqual(\n      Keg.recordKegs.record.toArray(),\n      pushedRecords.toArray(),\n      'The pushed records are registered in recordKeg'\n    );\n\n    assert.deepEqual(\n      Keg.idIndexes.record,\n      {\n        'navi.1': pushedRecords[0],\n        'navi.2': pushedRecords[1],\n      },\n      'The pushed records are registered in idIndexes'\n    );\n  });\n\n  test('insertMany pushes many records into the keg', function (assert) {\n    const records = [Record1, Record2];\n    const pushedRecords = Keg.insertMany('record', records);\n    assert.ok(\n      pushedRecords.every((rec, idx) => rec === records[idx]),\n      'insertMany returns an array of the inserted records'\n    );\n\n    const allRecords = Keg.all('record');\n    assert.ok(\n      records.every((rec, idx) => rec === allRecords[idx]),\n      'The inserted records are the same as the fetched records'\n    );\n\n    assert.ok(\n      Keg.recordKegs.record.toArray().every((rec, idx) => rec === records[idx]),\n      'The inserted records are registered in recordKeg'\n    );\n\n    assert.deepEqual(\n      Keg.idIndexes.record,\n      {\n        'navi.1': records[0],\n        'navi.2': records[1],\n      },\n      'The inserted records are registered in idIndexes'\n    );\n  });\n\n  test('pushMany updates keg records when provided records have the same id', function (assert) {\n    const firstPush = Keg.pushMany('record', [RawRecord1, RawRecord2]);\n\n    const secondPush = Keg.pushMany('record', [\n      { id: 1, description: 'updated' },\n      RawRecord3,\n      { id: 4, description: 'partially loaded record', partialData: true },\n    ]);\n\n    assert.deepEqual(\n      Keg.all('record'),\n      [...firstPush, secondPush[1], secondPush[2]],\n      'Pushing records into the keg with an existing id does not add a new record'\n    );\n\n    assert.equal(secondPush.firstObject, firstPush.firstObject, 'After update fetched record still the same object');\n\n    const fetchedRecord = Keg.getById('record', 1);\n    assert.equal(\n      fetchedRecord.description,\n      'updated',\n      'Pushing a record into the keg with an existing id updates the record'\n    );\n\n    assert.equal(\n      fetchedRecord,\n      firstPush.firstObject,\n      'After updating a record the same object is return when fetching'\n    );\n\n    const thirdPush = Keg.pushMany('record', [\n      {\n        id: 4,\n        description: 'Fully loaded record',\n      },\n    ]);\n\n    assert.deepEqual(\n      Keg.all('record'),\n      [...firstPush, secondPush[1], ...thirdPush],\n      'Pushing a record into the keg with an existing id containing partial data does not add a new record'\n    );\n\n    assert.notOk(\n      Keg.getById('record', 4).partialData,\n      'Partial flag is removed when partial record is updated without flag in update set'\n    );\n\n    assert.equal(secondPush[2], thirdPush[0], 'After update the returned record is the same object');\n  });\n\n  test('insertMany updates keg records when provided records have the same id', function (assert) {\n    const firstPush = Keg.insertMany('record', [Record1, Record2]);\n\n    const secondPush = Keg.insertMany('record', [\n      RecordFactory.create({ ...RawRecord1, description: 'updated' }),\n      Record3,\n      RecordFactory.create({ id: 4, description: 'partially loaded record', partialData: true }),\n    ]);\n\n    assert.deepEqual(\n      Keg.all('record'),\n      [...firstPush, secondPush[1], secondPush[2]],\n      'Inserting records into the keg with an existing id does not add a new record'\n    );\n\n    assert.equal(secondPush.firstObject, firstPush.firstObject, 'After update fetched record still the same object');\n\n    const fetchedRecord = Keg.getById('record', 1);\n    assert.equal(\n      fetchedRecord.description,\n      'updated',\n      'Inserting a record into the keg with an existing id updates the record'\n    );\n\n    assert.equal(\n      fetchedRecord,\n      firstPush.firstObject,\n      'After updating a record the same object is return when fetching'\n    );\n\n    const thirdPush = Keg.insertMany('record', [RecordFactory.create({ id: 4, description: 'Fully loaded record' })]);\n\n    assert.deepEqual(\n      Keg.all('record'),\n      [...firstPush, secondPush[1], ...thirdPush],\n      'Inserting a record into the keg with an existing id containing partial data does not add a new record'\n    );\n\n    assert.notOk(\n      Keg.getById('record', 4).partialData,\n      'Partial flag is removed when partial record is updated without flag in update set'\n    );\n\n    assert.equal(secondPush[2], thirdPush[0], 'After update the returned record is the same object');\n  });\n\n  test('pushMany can take an explicit modelFactory', function (assert) {\n    const pushedRecords = Keg.pushMany('notRecord', [RawRecord1, RawRecord2], {\n      modelFactory: 'record',\n    });\n\n    assert.ok(\n      pushedRecords.every((rec) => {\n        return rec instanceof RecordFactory.class;\n      }),\n      'pushMany returns an array of instances of the explicit type'\n    );\n  });\n\n  test('pushMany uses identifierField in factory if available', function (assert) {\n    const recordFactory = this.owner.factoryFor('model:record').class;\n\n    recordFactory.reopenClass({\n      identifierField: 'description',\n    });\n\n    const rawRecords = [RawRecord1, RawRecord2];\n    const pushedRecords = Keg.pushMany('record', rawRecords);\n\n    assert.deepEqual(\n      Keg.idIndexes.record,\n      {\n        'navi.foo': pushedRecords[0],\n        'navi.bar': pushedRecords[1],\n      },\n      'The pushed records are registered in idIndexes using identifierField defined in factory'\n    );\n\n    assert.equal(\n      Keg.getById('record', 'foo'),\n      pushedRecords[0],\n      'Record1 is fetched using the `identifierField` defined in the factory'\n    );\n  });\n\n  test('insertMany with identifierField option', function (assert) {\n    const records = [Record1, Record2];\n    Keg.insertMany('record', records, { identifierField: 'description' });\n\n    assert.deepEqual(\n      Keg.idIndexes.record,\n      {\n        'navi.foo': records[0],\n        'navi.bar': records[1],\n      },\n      'The inserted records are registered in idIndexes using the `identifierField` option'\n    );\n\n    assert.equal(Keg.getById('record', 'foo'), records[0], 'Record1 is fetched using the `identifierField`');\n  });\n\n  test('getById can be used to find a record by id', function (assert) {\n    Keg.push('record', RawRecord1);\n\n    const foundRecord = Keg.getById('record', 1);\n    assert.ok(foundRecord, 'after pushing a record it can be found');\n\n    assert.equal(foundRecord.id, RawRecord1.id, 'record has correct id');\n\n    assert.equal(foundRecord.description, RawRecord1.description, 'record has correct description');\n\n    const missingRecord = Keg.getById('record', 22);\n    assert.equal(missingRecord, undefined, 'getById returns undefined when given an id that is not present');\n\n    const missingType = Keg.getById('nonRegisteredType', 22);\n    assert.equal(missingType, undefined, 'getById returns undefined when given a type that is not present');\n  });\n\n  test('getBy can be used to search by fields when an object is passed', function (assert) {\n    Keg.pushMany('record', [RawRecord1, RawRecord2, RawRecord3]);\n\n    const foundRecords1 = Keg.getBy('record', { description: 'foo' });\n    assert.deepEqual(foundRecords1.mapBy('id'), [1], 'getBy returns an array when a single record was found');\n\n    let foundRecords2 = Keg.getBy('record', { description: 'bar' });\n    assert.deepEqual(foundRecords2.mapBy('id'), [2, 3], 'getBy returns an array when several records were found');\n\n    let foundRecords3 = Keg.getBy('record', {\n      description: 'bar',\n      meta: 'keg',\n    });\n    assert.deepEqual(\n      foundRecords3.mapBy('id'),\n      [3],\n      'getBy returns an array of found records when it matches all key-value pairs'\n    );\n\n    let foundRecords4 = Keg.getBy('record', {\n      description: 'bar',\n      meta: 'foo',\n    });\n    assert.deepEqual(foundRecords4.mapBy('id'), [], 'getBy returns an empty array when not all key-value pairs match');\n\n    let foundRecords5 = Keg.getBy('record', { description: 'ba' });\n    assert.deepEqual(foundRecords5.mapBy('id'), [], 'getBy returns an empty array when no records were found');\n\n    let foundRecords6 = Keg.getBy('record', {});\n    assert.deepEqual(\n      foundRecords6.mapBy('id'),\n      [1, 2, 3],\n      'getBy returns all records when an empty object is provided'\n    );\n\n    let foundRecords7 = Keg.getBy('record', { meta: ['ember', 'keg'] });\n    assert.deepEqual(\n      foundRecords7.mapBy('id'),\n      [1, 3],\n      'getBy returns all records when multiple values for a field is provided'\n    );\n\n    let missingType = Keg.getBy('nonRegisteredType', { id: 1 });\n    assert.deepEqual(missingType, [], 'getBy returns an empty array when given a type that is not present');\n  });\n\n  test('getBy can be used to search by fields when a function is passed', function (assert) {\n    Keg.pushMany('record', [RawRecord1, RawRecord2, RawRecord3]);\n\n    const foundRecords1 = Keg.getBy('record', (rec) => {\n      return rec.id < 2;\n    });\n    assert.deepEqual(foundRecords1.mapBy('id'), [1], 'getBy returns an array when a single record was found');\n\n    const foundRecords2 = Keg.getBy('record', (rec) => {\n      return rec.description === 'bar';\n    });\n    assert.deepEqual(foundRecords2.mapBy('id'), [2, 3], 'getBy returns an array when a several record was found');\n\n    const foundRecords3 = Keg.getBy('record', () => false);\n    assert.deepEqual(foundRecords3.mapBy('id'), [], 'getBy returns an empty array when no records were found');\n  });\n\n  test('all returns all records for a type', function (assert) {\n    assert.deepEqual(\n      Keg.all('record').toArray(),\n      [],\n      'all returns an empty array if on records have been pushed for the provided type'\n    );\n\n    const pushedRecords = Keg.pushMany('record', [RawRecord1, RawRecord2, RawRecord3]);\n    assert.deepEqual(\n      Keg.all('record').toArray(),\n      pushedRecords.toArray(),\n      'all returns all records in the keg for the provided type'\n    );\n\n    const unregisteredTypeRecords = Keg.pushMany('unregisteredType', [RawRecord1, RawRecord2, RawRecord3], {\n      modelFactory: Object,\n    });\n    assert.deepEqual(\n      Keg.all('unregisteredType').toArray(),\n      unregisteredTypeRecords.toArray(),\n      'all returns all records in the keg for the unregisteredType type'\n    );\n  });\n});\n","/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/tests/unit/services/navi-elide-apollo-test.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/tests/unit/utils/adapter-test.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/tests/unit/utils/metric-test.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/tests/unit/utils/pagination-test.js",[],"/Users/jholderbaugh/Documents/refactor-action-buttons/packages/data/tests/unit/utils/search-test.js",[],{"ruleId":"365","severity":1,"message":"366","line":9,"column":16,"nodeType":"367","endLine":20,"endColumn":3},{"ruleId":"365","severity":1,"message":"366","line":39,"column":65,"nodeType":"367","endLine":39,"endColumn":109},{"ruleId":"365","severity":1,"message":"366","line":40,"column":66,"nodeType":"367","endLine":40,"endColumn":111},{"ruleId":"365","severity":1,"message":"366","line":13,"column":41,"nodeType":"367","endLine":13,"endColumn":61},"ember/no-classic-classes","Native JS classes should be used instead of classic classes","CallExpression"]