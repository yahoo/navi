Environment: test
WARNING: Detected collisions between .js and .ts files of the same name. This can result in nondeterministic build output; see https://git.io/JvIwo for more information.
  - dummy/initializers/resize.{js,ts}
  - dummy/mixins/resize-aware.{js,ts}
  - dummy/services/resize.{js,ts}
cleaning up...
Built project successfully. Stored in "/var/folders/c0/1f4xqtss1rjdljpwz7g2w8rm0000gn/T/tests-dist-2020815-80220-1k2ki3z.85a3".
ok 1 Chrome 85.0 - [1 ms] - ESLint | mirage: mirage/config.js
    ---
        browser log: |
            WARN: DEPRECATION: Using the globals resolver is deprecated. Use the ember-resolver package instead. See https://deprecations.emberjs.com/v3.x#toc_ember-deprecate-globals-resolver [deprecation id: ember.globals-resolver] See https://deprecations.emberjs.com/v3.x#toc_ember-deprecate-globals-resolver for more details.
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at invoke (http://localhost:7357/assets/vendor.js:62803:9)
                    at deprecate (http://localhost:7357/assets/vendor.js:62759:28)
                    at Object.get (http://localhost:7357/assets/vendor.js:82760:53)
                    at Object.get (http://localhost:7357/assets/vendor.js:82771:20)
                    at processEmberShims (http://localhost:7357/assets/vendor.js:89016:26)
    ...
ok 2 Chrome 85.0 - [0 ms] - ESLint | mirage: mirage/fixtures/dashboard-widget.js
ok 3 Chrome 85.0 - [0 ms] - ESLint | mirage: mirage/fixtures/dashboard.js
ok 4 Chrome 85.0 - [1 ms] - ESLint | mirage: mirage/fixtures/delivery-rules.js
ok 5 Chrome 85.0 - [0 ms] - ESLint | mirage: mirage/fixtures/reports.js
ok 6 Chrome 85.0 - [0 ms] - ESLint | mirage: mirage/fixtures/roles.js
ok 7 Chrome 85.0 - [1 ms] - ESLint | mirage: mirage/fixtures/users.js
ok 8 Chrome 85.0 - [0 ms] - ESLint | mirage: mirage/scenarios/default.js
ok 9 Chrome 85.0 - [1 ms] - ESLint | mirage: mirage/serializers/application.js
ok 10 Chrome 85.0 - [2172 ms] - Acceptance | line chart: tooltip updates
ok 11 Chrome 85.0 - [1188 ms] - Acceptance | line chart: custom chart builders
ok 12 Chrome 85.0 - [1964 ms] - Acceptance | line chart: line style options
ok 13 Chrome 85.0 - [2403 ms] - Acceptance | line chart: series reorder
ok 14 Chrome 85.0 - [185 ms] - Acceptance | route helpers: route helpers
skip 15 Chrome 85.0 - [0 ms] - Acceptance | table: visiting /table
ok 16 Chrome 85.0 - [566 ms] - Acceptance | table: toggle table editing
ok 17 Chrome 85.0 - [691 ms] - Acceptance | table: edit table field
ok 18 Chrome 85.0 - [717 ms] - Acceptance | table: edit table field - empty title
ok 19 Chrome 85.0 - [60 ms] - Integration | Component | cell renderers/date-time: date-time renders day format correctly
ok 20 Chrome 85.0 - [60 ms] - Integration | Component | cell renderers/date-time: date-time renders week format correctly
ok 21 Chrome 85.0 - [55 ms] - Integration | Component | cell renderers/date-time: date-time renders week format with different years correctly
ok 22 Chrome 85.0 - [55 ms] - Integration | Component | cell renderers/date-time: date-time renders month format correctly
ok 23 Chrome 85.0 - [61 ms] - Integration | Component | cell renderers/date-time: date-time renders quarter format correctly
ok 24 Chrome 85.0 - [60 ms] - Integration | Component | cell renderers/date-time: date-time renders year format correctly
ok 25 Chrome 85.0 - [57 ms] - Integration | Component | cell renderers/date-time: date-time renders hour format correctly
ok 26 Chrome 85.0 - [57 ms] - Integration | Component | cell renderers/date-time: date-time renders minute format correctly
ok 27 Chrome 85.0 - [55 ms] - Integration | Component | cell renderers/date-time: date-time renders second format correctly
ok 28 Chrome 85.0 - [64 ms] - Integration | Component | cell renderers/dimension: dimension renders description value correctly
ok 29 Chrome 85.0 - [57 ms] - Integration | Component | cell renderers/dimension: dimension renders id value when description is empty
ok 30 Chrome 85.0 - [58 ms] - Integration | Component | cell renderers/dimension: dimension renders desc value when id is empty
ok 31 Chrome 85.0 - [58 ms] - Integration | Component | cell renderers/dimension: dimension renders no value with dashes correctly
ok 32 Chrome 85.0 - [57 ms] - Integration | Component | cell renderers/metric: it renders
ok 33 Chrome 85.0 - [64 ms] - Integration | Component | cell renderers/metric: metric renders zero value correctly
ok 34 Chrome 85.0 - [57 ms] - Integration | Component | cell renderers/metric: metric renders values > 100 correctly
ok 35 Chrome 85.0 - [58 ms] - Integration | Component | cell renderers/metric: metric renders decimal value between 1 and 100 correctly
ok 36 Chrome 85.0 - [57 ms] - Integration | Component | cell renderers/metric: metric renders decimal value between 0.0001 and 1 correctly
ok 37 Chrome 85.0 - [53 ms] - Integration | Component | cell renderers/metric: metric renders decimal value less than 0.0001 correctly
ok 38 Chrome 85.0 - [59 ms] - Integration | Component | cell renderers/metric: metric renders null value correctly
ok 39 Chrome 85.0 - [58 ms] - Integration | Component | cell renderers/metric: render value based on column format
ok 40 Chrome 85.0 - [60 ms] - Integration | Component | cell renderers/total: it renders
ok 41 Chrome 85.0 - [143 ms] - Integration | Component | chart series config: Component renders
ok 42 Chrome 85.0 - [121 ms] - Integration | Component | chart series config: Component renders dimensions correctly
ok 43 Chrome 85.0 - [136 ms] - Integration | Component | chart series config: Component renders formatted metrics correctly
ok 44 Chrome 85.0 - [60 ms] - Integration | Component | comma separated list: comma separated list
ok 45 Chrome 85.0 - [61 ms] - Integration | Component | lazy render: it renders
ok 46 Chrome 85.0 - [55 ms] - Integration | Component | navi-button: it renders
ok 47 Chrome 85.0 - [59 ms] - Integration | Component | navi-button: type
ok 48 Chrome 85.0 - [60 ms] - Integration | Component | navi-button: disabled
ok 49 Chrome 85.0 - [71 ms] - Integration | Component | navi-button: onClick
ok 50 Chrome 85.0 - [57 ms] - Integration | Component | navi icon: render icon
ok 51 Chrome 85.0 - [56 ms] - Integration | Component | navi loader: it renders
ok 52 Chrome 85.0 - [169 ms] - Integration | Component | navi vis c3 chart: resize
ok 53 Chrome 85.0 - [121 ms] - Integration | Component | navi vis c3 chart: series classes
ok 54 Chrome 85.0 - [171 ms] - Integration | Component | bar chart: it renders
ok 55 Chrome 85.0 - [180 ms] - Integration | Component | bar chart: multiple metric series
ok 56 Chrome 85.0 - [237 ms] - Integration | Component | bar chart: multiple dimension series
ok 57 Chrome 85.0 - [177 ms] - Integration | Component | goal gauge : goal-gauge renders correctly
ok 58 Chrome 85.0 - [182 ms] - Integration | Component | goal gauge : goal-gauge renders correctly with multi datasource
ok 59 Chrome 85.0 - [159 ms] - Integration | Component | goal gauge : goal-gauge renders correctly with unit
ok 60 Chrome 85.0 - [174 ms] - Integration | Component | goal gauge : goal-gauge renders correctly with prefix
ok 61 Chrome 85.0 - [895 ms] - Integration | Component | goal gauge : goal-gauge title class is based on actualValue vs baselineValue
ok 62 Chrome 85.0 - [162 ms] - Integration | Component | goal gauge : goal-guage with parameterized metric
ok 63 Chrome 85.0 - [532 ms] - Integration | Component | goal gauge : goal-gauge value & min/max precision
ok 64 Chrome 85.0 - [166 ms] - Integration | Component | goal gauge : goal-gauge renders custom metric title
ok 65 Chrome 85.0 - [516 ms] - Integration | Component | goal gauge : cleanup
ok 66 Chrome 85.0 - [171 ms] - Integration | Component | line chart: it renders
ok 67 Chrome 85.0 - [168 ms] - Integration | Component | line chart: missing data - metrics
ok 68 Chrome 85.0 - [184 ms] - Integration | Component | line chart: missing data - dimensions
ok 69 Chrome 85.0 - [169 ms] - Integration | Component | line chart: multiple series
ok 70 Chrome 85.0 - [604 ms] - Integration | Component | line chart: y axis label
ok 71 Chrome 85.0 - [150 ms] - Integration | Component | line chart: Highlight data points
ok 72 Chrome 85.0 - [187 ms] - Integration | Component | line chart: dateTime model
ok 73 Chrome 85.0 - [171 ms] - Integration | Component | line chart: Metric series legend
ok 74 Chrome 85.0 - [172 ms] - Integration | Component | line chart: multi-datasource labels
ok 75 Chrome 85.0 - [200 ms] - Integration | Component | line chart: cleanup tooltip
ok 76 Chrome 85.0 - [57 ms] - Integration | Component | navi-visualization/metric-label: metric label renders correctly
ok 77 Chrome 85.0 - [56 ms] - Integration | Component | navi-visualization/metric-label: metric label renders correctly when model has multiple metrics
ok 78 Chrome 85.0 - [55 ms] - Integration | Component | navi-visualization/metric-label: metric label renders formatted string when format not null
ok 79 Chrome 85.0 - [161 ms] - Integration | Component | pie chart: it renders for a dimension series
ok 80 Chrome 85.0 - [150 ms] - Integration | Component | pie chart: it renders for a metric series
ok 81 Chrome 85.0 - [884 ms] - Integration | Component | pie chart: metric label
ok 82 Chrome 85.0 - [159 ms] - Integration | Component | pie chart: parameterized metric renders correctly for dimension series
ok 83 Chrome 85.0 - [173 ms] - Integration | Component | pie chart: renders correctly with multi datasource
ok 84 Chrome 85.0 - [149 ms] - Integration | Component | pie chart: parameterized metric renders correctly for metric series
ok 85 Chrome 85.0 - [154 ms] - Integration | Component | pie chart: cleanup tooltip
ok 86 Chrome 85.0 - [162 ms] - Integration | Component | navi visualizations/table print: it renders
ok 87 Chrome 85.0 - [198 ms] - Integration | Component | table: it renders
ok 88 Chrome 85.0 - [173 ms] - Integration | Component | table: render alternative datasource
ok 89 Chrome 85.0 - [2248 ms] - Integration | Component | table: onUpdateReport
not ok 90 Chrome 85.0 - [214 ms] - Integration | Component | table: grand total in table
    ---
        actual: >
            Element .table-row__total-row is visible once
        expected: >
            Element .table-row__total-row is not visible
        stack: >
                at DOMAssertions.isVisible (http://localhost:7357/assets/test-support.js:10274:16)
                at DOMAssertions.isNotVisible (http://localhost:7357/assets/test-support.js:10562:21)
                at Object.<anonymous> (http://localhost:7357/assets/tests.js:4196:43)
        message: >
            The total row is not visible when show grand total is `false`
        negative: >
            false
        browser log: |
    ...
ok 91 Chrome 85.0 - [274 ms] - Integration | Component | table: subtotals in table
ok 92 Chrome 85.0 - [202 ms] - Integration | Component | table: subtotals by date in table
ok 93 Chrome 85.0 - [164 ms] - Integration | Component | table: table row info
ok 94 Chrome 85.0 - [203 ms] - Integration | Component | table: totals and subtotals for partial data
ok 95 Chrome 85.0 - [167 ms] - Integration | Component | table: sort icon for a parameterized metric
ok 96 Chrome 85.0 - [237 ms] - Integration | Component | table: table header cell display name
ok 97 Chrome 85.0 - [98 ms] - Integration | Component | number format dropdown: updating format
ok 98 Chrome 85.0 - [75 ms] - Integration | Component | number format selector: updateFormat from radio button
ok 99 Chrome 85.0 - [74 ms] - Integration | Component | number format selector: clearFormat
ok 100 Chrome 85.0 - [98 ms] - Integration | Component | number format selector: highlight correct format when customFormat is changed
ok 101 Chrome 85.0 - [84 ms] - Integration | Component | power-select-search: power-select-search
ok 102 Chrome 85.0 - [112 ms] - Integration | Component | power-select-search: passed to power-select
ok 103 Chrome 85.0 - [64 ms] - Integration | Component | table cell renderer: it renders the correct cell renderer
ok 104 Chrome 85.0 - [100 ms] - Integration | Component | visualization config/goal gauge: it renders
ok 105 Chrome 85.0 - [112 ms] - Integration | Component | visualization config/goal gauge: onUpdateConfig baselineValue input
ok 106 Chrome 85.0 - [112 ms] - Integration | Component | visualization config/goal gauge: onUpdateConfig goalValue input
ok 107 Chrome 85.0 - [111 ms] - Integration | Component | visualization config/goal gauge: onUpdateConfig goal gauge label input
ok 108 Chrome 85.0 - [62 ms] - Integration | Component | visualization config/line chart: component renders
ok 109 Chrome 85.0 - [67 ms] - Integration | Component | visualization config/line chart: showStackOption
ok 110 Chrome 85.0 - [90 ms] - Integration | Component | visualization config/metric-label: component renders
ok 111 Chrome 85.0 - [85 ms] - Integration | Component | visualization config/metric-label: onUpdateConfig format input
ok 112 Chrome 85.0 - [84 ms] - Integration | Component | visualization config/metric-label: onUpdateConfig description input
ok 113 Chrome 85.0 - [137 ms] - Integration | Component | visualization config/series chart: metric selector
ok 114 Chrome 85.0 - [98 ms] - Integration | Component | visualization config/table: it renders
ok 115 Chrome 85.0 - [118 ms] - Integration | Component | visualization config/table: table config - feature flag set
ok 116 Chrome 85.0 - [103 ms] - Integration | Component | visualization config/table: table config - grandTotal flag option set
ok 117 Chrome 85.0 - [137 ms] - Integration | Component | visualization config/table: table config - subtotal
ok 118 Chrome 85.0 - [117 ms] - Integration | Component | visualization config/table: table config - subtotal flag option set
ok 119 Chrome 85.0 - [96 ms] - Integration | Component | visualization config/warpper: component renders
ok 120 Chrome 85.0 - [102 ms] - Integration | Component | visualization config/warpper: onUpdateChartConfig
ok 121 Chrome 85.0 - [109 ms] - helper:default-column-name: dateTime column
ok 122 Chrome 85.0 - [100 ms] - helper:default-column-name: dimension column
ok 123 Chrome 85.0 - [96 ms] - helper:default-column-name: metric column
ok 124 Chrome 85.0 - [96 ms] - helper:default-column-name: metric column with parameters
ok 125 Chrome 85.0 - [94 ms] - helper:default-column-name: time-dimension support test
ok 126 Chrome 85.0 - [57 ms] - Integration | Helper | get-shallow: it renders
ok 127 Chrome 85.0 - [62 ms] - Integration | Helper | mixed height layout: layout
ok 128 Chrome 85.0 - [66 ms] - helper:serialize: it returns serialization of model
ok 129 Chrome 85.0 - [59 ms] - helper:serialize: it returns with undefined or null
ok 130 Chrome 85.0 - [60 ms] - helper:tooltip-value-formatter: makes a call to smart-format-number by default
ok 131 Chrome 85.0 - [0 ms] - ESLint | app: adapters/mock.js
ok 132 Chrome 85.0 - [0 ms] - ESLint | app: app.js
ok 133 Chrome 85.0 - [1 ms] - ESLint | app: chart-builders/custom-type.js
ok 134 Chrome 85.0 - [0 ms] - ESLint | app: controllers/bar-chart.js
ok 135 Chrome 85.0 - [0 ms] - ESLint | app: controllers/goal-gauge.js
ok 136 Chrome 85.0 - [0 ms] - ESLint | app: controllers/line-chart.js
ok 137 Chrome 85.0 - [0 ms] - ESLint | app: controllers/metric-label.js
ok 138 Chrome 85.0 - [0 ms] - ESLint | app: controllers/pie-chart.js
ok 139 Chrome 85.0 - [0 ms] - ESLint | app: controllers/table.js
ok 140 Chrome 85.0 - [0 ms] - ESLint | app: models/all-the-fragments.js
ok 141 Chrome 85.0 - [0 ms] - ESLint | app: models/dimension-age.js
ok 142 Chrome 85.0 - [1 ms] - ESLint | app: models/fragments-mock.js
ok 143 Chrome 85.0 - [0 ms] - ESLint | app: models/mock.js
ok 144 Chrome 85.0 - [1 ms] - ESLint | app: router.js
ok 145 Chrome 85.0 - [0 ms] - ESLint | app: routes/application.js
ok 146 Chrome 85.0 - [0 ms] - ESLint | app: routes/bar-chart.js
ok 147 Chrome 85.0 - [0 ms] - ESLint | app: routes/buttons.js
ok 148 Chrome 85.0 - [0 ms] - ESLint | app: routes/goal-gauge.js
ok 149 Chrome 85.0 - [0 ms] - ESLint | app: routes/line-chart.js
ok 150 Chrome 85.0 - [0 ms] - ESLint | app: routes/metric-label.js
ok 151 Chrome 85.0 - [0 ms] - ESLint | app: routes/pie-chart.js
ok 152 Chrome 85.0 - [0 ms] - ESLint | app: routes/table.js
ok 153 Chrome 85.0 - [0 ms] - TemplateLint: dummy/templates/application.hbs
ok 154 Chrome 85.0 - [0 ms] - TemplateLint: dummy/templates/bar-chart.hbs
ok 155 Chrome 85.0 - [0 ms] - TemplateLint: dummy/templates/buttons.hbs
ok 156 Chrome 85.0 - [0 ms] - TemplateLint: dummy/templates/goal-gauge.hbs
ok 157 Chrome 85.0 - [0 ms] - TemplateLint: dummy/templates/helpers.hbs
ok 158 Chrome 85.0 - [0 ms] - TemplateLint: dummy/templates/line-chart.hbs
ok 159 Chrome 85.0 - [0 ms] - TemplateLint: dummy/templates/metric-label.hbs
ok 160 Chrome 85.0 - [0 ms] - TemplateLint: dummy/templates/pie-chart.hbs
ok 161 Chrome 85.0 - [1 ms] - TemplateLint: dummy/templates/table.hbs
ok 162 Chrome 85.0 - [0 ms] - ESLint | tests: acceptance/line-chart-test.js
ok 163 Chrome 85.0 - [0 ms] - ESLint | tests: acceptance/route-helpers-test.js
ok 164 Chrome 85.0 - [1 ms] - ESLint | tests: acceptance/table-test.js
ok 165 Chrome 85.0 - [0 ms] - ESLint | tests: helpers/request.js
ok 166 Chrome 85.0 - [0 ms] - ESLint | tests: integration/components/cell-renderers/date-time-test.js
ok 167 Chrome 85.0 - [0 ms] - ESLint | tests: integration/components/cell-renderers/dimension-test.js
ok 168 Chrome 85.0 - [0 ms] - ESLint | tests: integration/components/cell-renderers/metric-test.js
ok 169 Chrome 85.0 - [0 ms] - ESLint | tests: integration/components/cell-renderers/total-test.js
ok 170 Chrome 85.0 - [0 ms] - ESLint | tests: integration/components/chart-series-config-test.js
ok 171 Chrome 85.0 - [1 ms] - ESLint | tests: integration/components/comma-separated-list-test.js
ok 172 Chrome 85.0 - [0 ms] - ESLint | tests: integration/components/lazy-render-test.js
ok 173 Chrome 85.0 - [1 ms] - ESLint | tests: integration/components/navi-button-test.js
ok 174 Chrome 85.0 - [0 ms] - ESLint | tests: integration/components/navi-icon-test.js
ok 175 Chrome 85.0 - [0 ms] - ESLint | tests: integration/components/navi-loader-test.js
ok 176 Chrome 85.0 - [0 ms] - ESLint | tests: integration/components/navi-vis-c3-chart-test.js
ok 177 Chrome 85.0 - [0 ms] - ESLint | tests: integration/components/navi-visualizations/bar-chart-test.js
ok 178 Chrome 85.0 - [0 ms] - ESLint | tests: integration/components/navi-visualizations/goal-gauge-test.js
ok 179 Chrome 85.0 - [0 ms] - ESLint | tests: integration/components/navi-visualizations/line-chart-test.js
ok 180 Chrome 85.0 - [0 ms] - ESLint | tests: integration/components/navi-visualizations/metric-label-test.js
ok 181 Chrome 85.0 - [0 ms] - ESLint | tests: integration/components/navi-visualizations/pie-chart-test.js
ok 182 Chrome 85.0 - [1 ms] - ESLint | tests: integration/components/navi-visualizations/table-print-test.js
ok 183 Chrome 85.0 - [0 ms] - ESLint | tests: integration/components/navi-visualizations/table-test.js
ok 184 Chrome 85.0 - [0 ms] - ESLint | tests: integration/components/number-format-dropdown-test.js
ok 185 Chrome 85.0 - [0 ms] - ESLint | tests: integration/components/number-format-selector-test.js
ok 186 Chrome 85.0 - [0 ms] - ESLint | tests: integration/components/power-select-search-test.js
ok 187 Chrome 85.0 - [0 ms] - ESLint | tests: integration/components/table-cell-renderer-test.js
ok 188 Chrome 85.0 - [0 ms] - ESLint | tests: integration/components/visualization-config/goal-gauge-test.js
ok 189 Chrome 85.0 - [1 ms] - ESLint | tests: integration/components/visualization-config/line-chart-test.js
ok 190 Chrome 85.0 - [0 ms] - ESLint | tests: integration/components/visualization-config/metric-label-test.js
ok 191 Chrome 85.0 - [1 ms] - ESLint | tests: integration/components/visualization-config/series-chart-test.js
ok 192 Chrome 85.0 - [0 ms] - ESLint | tests: integration/components/visualization-config/table-test.js
ok 193 Chrome 85.0 - [0 ms] - ESLint | tests: integration/components/visualization-config/wrapper-test.js
ok 194 Chrome 85.0 - [0 ms] - ESLint | tests: integration/helpers/default-column-name-test.js
ok 195 Chrome 85.0 - [0 ms] - ESLint | tests: integration/helpers/mixed-height-layout-test.js
ok 196 Chrome 85.0 - [1 ms] - ESLint | tests: integration/helpers/serialize-test.js
ok 197 Chrome 85.0 - [0 ms] - ESLint | tests: integration/helpers/tooltip-value-formatter-test.js
ok 198 Chrome 85.0 - [1 ms] - ESLint | tests: unit/adapters/base-json-adapter-test.js
ok 199 Chrome 85.0 - [0 ms] - ESLint | tests: unit/adapters/dashboard-test.js
ok 200 Chrome 85.0 - [0 ms] - ESLint | tests: unit/adapters/dashboard-widget-test.js
ok 201 Chrome 85.0 - [0 ms] - ESLint | tests: unit/chart-builders/date-test.js
ok 202 Chrome 85.0 - [0 ms] - ESLint | tests: unit/chart-builders/dimension-test.js
ok 203 Chrome 85.0 - [0 ms] - ESLint | tests: unit/chart-builders/metric-test.js
ok 204 Chrome 85.0 - [0 ms] - ESLint | tests: unit/components/navi-visualizations/goal-gauge-test.js
ok 205 Chrome 85.0 - [0 ms] - ESLint | tests: unit/components/navi-visualizations/line-chart-test.js
ok 206 Chrome 85.0 - [1 ms] - ESLint | tests: unit/components/navi-visualizations/pie-chart-test.js
ok 207 Chrome 85.0 - [0 ms] - ESLint | tests: unit/components/navi-visualizations/table-test.js
ok 208 Chrome 85.0 - [1 ms] - ESLint | tests: unit/components/visualization-config/table-test.js
ok 209 Chrome 85.0 - [0 ms] - ESLint | tests: unit/helpers/as-interval-test.js
ok 210 Chrome 85.0 - [0 ms] - ESLint | tests: unit/helpers/default-config-test.js
ok 211 Chrome 85.0 - [0 ms] - ESLint | tests: unit/helpers/feature-flag-test.js
ok 212 Chrome 85.0 - [0 ms] - ESLint | tests: unit/helpers/format-chart-tooltip-date-test.js
ok 213 Chrome 85.0 - [0 ms] - ESLint | tests: unit/helpers/format-date-for-granularity-test.js
ok 214 Chrome 85.0 - [0 ms] - ESLint | tests: unit/helpers/format-dimension-test.js
ok 215 Chrome 85.0 - [0 ms] - ESLint | tests: unit/helpers/is-forbidden-test.js
ok 216 Chrome 85.0 - [0 ms] - ESLint | tests: unit/helpers/navi-get-display-list-test.js
ok 217 Chrome 85.0 - [1 ms] - ESLint | tests: unit/helpers/navi-get-display-name-test.js
ok 218 Chrome 85.0 - [0 ms] - ESLint | tests: unit/helpers/serialize-test.js
ok 219 Chrome 85.0 - [0 ms] - ESLint | tests: unit/helpers/smart-format-number-test.js
ok 220 Chrome 85.0 - [0 ms] - ESLint | tests: unit/initializers/inject-c3-enhancements-test.js
ok 221 Chrome 85.0 - [0 ms] - ESLint | tests: unit/models/bar-chart-test.js
ok 222 Chrome 85.0 - [0 ms] - ESLint | tests: unit/models/bard-request/fragments/dimension-test.js
ok 223 Chrome 85.0 - [0 ms] - ESLint | tests: unit/models/bard-request/fragments/filter-test.js
ok 224 Chrome 85.0 - [1 ms] - ESLint | tests: unit/models/bard-request/fragments/having-test.js
ok 225 Chrome 85.0 - [0 ms] - ESLint | tests: unit/models/bard-request/fragments/interval-test.js
ok 226 Chrome 85.0 - [0 ms] - ESLint | tests: unit/models/bard-request/fragments/logical-table-test.js
ok 227 Chrome 85.0 - [0 ms] - ESLint | tests: unit/models/bard-request/fragments/metric-test.js
ok 228 Chrome 85.0 - [0 ms] - ESLint | tests: unit/models/bard-request/fragments/sort-test.js
ok 229 Chrome 85.0 - [0 ms] - ESLint | tests: unit/models/bard-request/request-test.js
ok 230 Chrome 85.0 - [0 ms] - ESLint | tests: unit/models/dashboard-test.js
ok 231 Chrome 85.0 - [1 ms] - ESLint | tests: unit/models/dashboard-widget-test.js
ok 232 Chrome 85.0 - [0 ms] - ESLint | tests: unit/models/deliverable-item-test.js
ok 233 Chrome 85.0 - [0 ms] - ESLint | tests: unit/models/delivery-rule-test.js
ok 234 Chrome 85.0 - [0 ms] - ESLint | tests: unit/models/goal-gauge-test.js
ok 235 Chrome 85.0 - [0 ms] - ESLint | tests: unit/models/line-chart-test.js
ok 236 Chrome 85.0 - [0 ms] - ESLint | tests: unit/models/metric-label-test.js
ok 237 Chrome 85.0 - [0 ms] - ESLint | tests: unit/models/mock-test.js
ok 238 Chrome 85.0 - [1 ms] - ESLint | tests: unit/models/pie-chart-test.js
ok 239 Chrome 85.0 - [0 ms] - ESLint | tests: unit/models/report-test.js
ok 240 Chrome 85.0 - [0 ms] - ESLint | tests: unit/models/role-test.js
ok 241 Chrome 85.0 - [0 ms] - ESLint | tests: unit/models/table-test.js
ok 242 Chrome 85.0 - [0 ms] - ESLint | tests: unit/models/user-test.js
ok 243 Chrome 85.0 - [0 ms] - ESLint | tests: unit/navi-visualization-manifests/bar-chart-test.js
ok 244 Chrome 85.0 - [0 ms] - ESLint | tests: unit/navi-visualization-manifests/goal-gauge-test.js
ok 245 Chrome 85.0 - [1 ms] - ESLint | tests: unit/navi-visualization-manifests/line-chart-test.js
ok 246 Chrome 85.0 - [0 ms] - ESLint | tests: unit/navi-visualization-manifests/metric-label-test.js
ok 247 Chrome 85.0 - [0 ms] - ESLint | tests: unit/navi-visualization-manifests/pie-chart-test.js
ok 248 Chrome 85.0 - [0 ms] - ESLint | tests: unit/serializers/bard-request/fragments/interval-test.js
ok 249 Chrome 85.0 - [0 ms] - ESLint | tests: unit/serializers/bard-request/fragments/metric-test.js
ok 250 Chrome 85.0 - [0 ms] - ESLint | tests: unit/serializers/bard-request/request-test.js
ok 251 Chrome 85.0 - [0 ms] - ESLint | tests: unit/serializers/dashboard-test.js
ok 252 Chrome 85.0 - [1 ms] - ESLint | tests: unit/serializers/goal-gauge-test.js
ok 253 Chrome 85.0 - [0 ms] - ESLint | tests: unit/serializers/line-chart-test.js
ok 254 Chrome 85.0 - [0 ms] - ESLint | tests: unit/serializers/metric-label-test.js
ok 255 Chrome 85.0 - [0 ms] - ESLint | tests: unit/serializers/pie-chart-test.js
ok 256 Chrome 85.0 - [0 ms] - ESLint | tests: unit/serializers/table-test.js
ok 257 Chrome 85.0 - [1 ms] - ESLint | tests: unit/services/action-dispatcher-test.js
ok 258 Chrome 85.0 - [0 ms] - ESLint | tests: unit/services/compression-test.js
ok 259 Chrome 85.0 - [1 ms] - ESLint | tests: unit/services/user-test.js
ok 260 Chrome 85.0 - [0 ms] - ESLint | tests: unit/transforms/dimension-test.js
ok 261 Chrome 85.0 - [0 ms] - ESLint | tests: unit/transforms/metric-test.js
ok 262 Chrome 85.0 - [0 ms] - ESLint | tests: unit/transforms/moment-test.js
ok 263 Chrome 85.0 - [0 ms] - ESLint | tests: unit/transforms/table-test.js
ok 264 Chrome 85.0 - [0 ms] - ESLint | tests: unit/utils/chart-data-test.js
ok 265 Chrome 85.0 - [0 ms] - ESLint | tests: unit/utils/chart-test.js
ok 266 Chrome 85.0 - [1 ms] - ESLint | tests: unit/utils/classes/data-group-test.js
ok 267 Chrome 85.0 - [0 ms] - ESLint | tests: unit/utils/classes/duration-test.js
ok 268 Chrome 85.0 - [0 ms] - ESLint | tests: unit/utils/classes/interval-test.js
ok 269 Chrome 85.0 - [0 ms] - ESLint | tests: unit/utils/custom-computed-properties-test.js
ok 270 Chrome 85.0 - [0 ms] - ESLint | tests: unit/utils/data-test.js
ok 271 Chrome 85.0 - [1 ms] - ESLint | tests: unit/utils/date-test.js
ok 272 Chrome 85.0 - [0 ms] - ESLint | tests: unit/utils/duration-utils-test.js
ok 273 Chrome 85.0 - [1 ms] - ESLint | tests: unit/utils/error-test.js
ok 274 Chrome 85.0 - [0 ms] - ESLint | tests: unit/utils/pagination-test.js
ok 275 Chrome 85.0 - [0 ms] - ESLint | tests: unit/utils/persistence-error-test.js
ok 276 Chrome 85.0 - [0 ms] - ESLint | tests: unit/utils/search-test.js
ok 277 Chrome 85.0 - [0 ms] - ESLint | tests: unit/validators/array-empty-test.js
ok 278 Chrome 85.0 - [1 ms] - ESLint | tests: unit/validators/array-number-test.js
ok 279 Chrome 85.0 - [0 ms] - ESLint | tests: unit/validators/chart-type-test.js
ok 280 Chrome 85.0 - [1 ms] - ESLint | tests: unit/validators/interval-test.js
ok 281 Chrome 85.0 - [0 ms] - ESLint | tests: unit/validators/recipients-test.js
ok 282 Chrome 85.0 - [0 ms] - ESLint | tests: unit/validators/request-dimension-order-test.js
ok 283 Chrome 85.0 - [0 ms] - ESLint | tests: unit/validators/request-filters-test.js
ok 284 Chrome 85.0 - [0 ms] - ESLint | tests: unit/validators/request-metric-exist-test.js
ok 285 Chrome 85.0 - [0 ms] - ESLint | tests: unit/validators/request-metrics-test.js
ok 286 Chrome 85.0 - [33 ms] - Unit | Adapter | Base Json Adapter: ajaxOptions
ok 287 Chrome 85.0 - [21 ms] - Unit | Adapter | dashboard: default host
ok 288 Chrome 85.0 - [21 ms] - Unit | Adapter | dashboard: host configuration
ok 289 Chrome 85.0 - [21 ms] - Unit | Adapter | dashboard widget: it exists
ok 290 Chrome 85.0 - [22 ms] - Unit | Adapter | dashboard widget: urlForCreateRecord
ok 291 Chrome 85.0 - [23 ms] - Unit | Adapter | dashboard widget: urlForUpdateRecord
ok 292 Chrome 85.0 - [7 ms] - Unit | Chart Builders | Date Time: weeks by year uses isoWeekYear
ok 293 Chrome 85.0 - [2 ms] - Unit | Chart Builders | Date Time: days by month
ok 294 Chrome 85.0 - [13 ms] - Unit | Chart Builders | Date Time: days by year
ok 295 Chrome 85.0 - [1 ms] - Unit | Chart Builders | Date Time: months by year
ok 296 Chrome 85.0 - [3 ms] - Unit | Chart Builders | Date Time: hours by day
ok 297 Chrome 85.0 - [1 ms] - Unit | Chart Builders | Date Time: minutes by hour
ok 298 Chrome 85.0 - [1 ms] - Unit | Chart Builders | Date Time: seconds by minute
ok 299 Chrome 85.0 - [1 ms] - Unit | Chart Builders | Date Time: Zero in chart data
ok 300 Chrome 85.0 - [2 ms] - Unit | Chart Builders | Date Time: buildTooltip
ok 301 Chrome 85.0 - [2 ms] - Unit | Chart Builders | Dimension: buildData - no dimensions
ok 302 Chrome 85.0 - [2 ms] - Unit | Chart Builders | Dimension: groupDataBySeries - many dimensions of same type
ok 303 Chrome 85.0 - [0 ms] - Unit | Chart Builders | Dimension: groupDataBySeries all granularity - many dimensions of same type
ok 304 Chrome 85.0 - [1 ms] - Unit | Chart Builders | Dimension: groupDataBySeries hour granularity - many dimensions of same type
ok 305 Chrome 85.0 - [1 ms] - Unit | Chart Builders | Dimension: groupDataBySeries month granularity - many dimensions of same type
ok 306 Chrome 85.0 - [1 ms] - Unit | Chart Builders | Dimension: groupDataBySeries - many dimensions of different type
ok 307 Chrome 85.0 - [1 ms] - Unit | Chart Builders | Dimension: groupDataBySeries - many dimensions of different type with some that are not found
ok 308 Chrome 85.0 - [1 ms] - Unit | Chart Builders | Dimension: buildTooltip
ok 309 Chrome 85.0 - [1 ms] - Unit | Chart Builders | Dimension: group by dimension with when id is not present
ok 310 Chrome 85.0 - [65 ms] - Unit | Chart Builders | Metric: buildData - no metrics
ok 311 Chrome 85.0 - [62 ms] - Unit | Chart Builders | Metric: groupDataBySeries - many metrics
ok 312 Chrome 85.0 - [61 ms] - Unit | Chart Builders | Metric: groupDataBySeries - gaps in data
ok 313 Chrome 85.0 - [61 ms] - Unit | Chart Builders | Metric: groupDataBySeries - hour granularity series
ok 314 Chrome 85.0 - [62 ms] - Unit | Chart Builders | Metric: groupDataBySeries - month granularity series
ok 315 Chrome 85.0 - [64 ms] - Unit | Chart Builders | Metric: Zero in chart data
ok 316 Chrome 85.0 - [65 ms] - Unit | Chart Builders | Metric: buildTooltip
ok 317 Chrome 85.0 - [22 ms] - Unit | Component | Goal Gauge: data
ok 318 Chrome 85.0 - [22 ms] - Unit | Component | Goal Gauge: gauge
ok 319 Chrome 85.0 - [21 ms] - Unit | Component | Goal Gauge: thresholdValues
ok 320 Chrome 85.0 - [27 ms] - Unit | Component | Goal Gauge: color
ok 321 Chrome 85.0 - [24 ms] - Unit | Component | Goal Gauge: _formatNumber
ok 322 Chrome 85.0 - [24 ms] - Unit | Component | Goal Gauge: metricTitle
ok 323 Chrome 85.0 - [73 ms] - Unit | Component | line chart: dataConfig
ok 324 Chrome 85.0 - [67 ms] - Unit | Component | line chart: dataSelectionConfig
ok 325 Chrome 85.0 - [65 ms] - Unit | Component | line chart: config
ok 326 Chrome 85.0 - [66 ms] - Unit | Component | line chart: single data point
ok 327 Chrome 85.0 - [71 ms] - Unit | Component | line chart: tooltips
ok 328 Chrome 85.0 - [78 ms] - Unit | Component | line chart: line chart styles
ok 329 Chrome 85.0 - [70 ms] - Unit | Component | line chart: xAxisTickValues
ok 330 Chrome 85.0 - [63 ms] - Unit | Component | pie chart: pieConfig
ok 331 Chrome 85.0 - [65 ms] - Unit | Component | pie chart: dataConfig
ok 332 Chrome 85.0 - [65 ms] - Unit | Component | pie chart: tooltipComponent
ok 333 Chrome 85.0 - [63 ms] - Unit | Component | table: columns
ok 334 Chrome 85.0 - [63 ms] - Unit | Component | table: datetime _getNextSortDirection
ok 335 Chrome 85.0 - [60 ms] - Unit | Component | table: metric _getNextSortDirection
ok 336 Chrome 85.0 - [61 ms] - Unit | Component | table: table data changes with options
ok 337 Chrome 85.0 - [63 ms] - Unit | Component | table: computeTotal and computeSubtotals
ok 338 Chrome 85.0 - [60 ms] - Unit | Component | table: computeTotal and computeSubtotals with an overriding computeColumnTotal method
ok 339 Chrome 85.0 - [52 ms] - Unit | Component | table config: dimensions
ok 340 Chrome 85.0 - [1 ms] - Unit | Helper | as interval: interval object returned from interval object or interval string
ok 341 Chrome 85.0 - [24 ms] - Unit | Helper | default config: default config
ok 342 Chrome 85.0 - [23 ms] - Unit | Helper | default config: bad visualization
ok 343 Chrome 85.0 - [1 ms] - Unit | Helper | feature flag: flag value is returned
ok 344 Chrome 85.0 - [1 ms] - Unit | Helpers | Format Chart Tooltip Date: formatChartTooltipDate
ok 345 Chrome 85.0 - [1 ms] - Unit | Helper | format date for granularity: all
ok 346 Chrome 85.0 - [0 ms] - Unit | Helper | format date for granularity: quarter
ok 347 Chrome 85.0 - [1 ms] - Unit | Helper | format date for granularity: week
ok 348 Chrome 85.0 - [0 ms] - Unit | Helper | format date for granularity: validity
ok 349 Chrome 85.0 - [0 ms] - Unit | Helper | format dimension: Formatted id
ok 350 Chrome 85.0 - [0 ms] - Unit | Helper | is forbidden: it returns true with rejected promise with forbidden error
ok 351 Chrome 85.0 - [0 ms] - Unit | Helper | is forbidden: it returns false with other data types
ok 352 Chrome 85.0 - [23 ms] - Unit | Helper | navi get display list: display name is returned
ok 353 Chrome 85.0 - [22 ms] - Unit | Helper | navi get display name: display name is returned
ok 354 Chrome 85.0 - [27 ms] - Unit | Helper | serialize: it throws an assertion if it's not serializable model
ok 355 Chrome 85.0 - [1 ms] - Unit | Helpers | Smart Format Number: smartFormatNumber
ok 356 Chrome 85.0 - [8 ms] - Unit | Initializer | inject c3 enhancements: function overrides
    ---
        browser log: |
            WARN: DEPRECATION: Using the globals resolver is deprecated. Use the ember-resolver package instead. See https://deprecations.emberjs.com/v3.x#toc_ember-deprecate-globals-resolver [deprecation id: globals-resolver] See https://deprecations.emberjs.com/v3.x#toc_ember-deprecate-globals-resolver for more details.
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
    ...
ok 357 Chrome 85.0 - [29 ms] - Unit | Model | Bar Chart Visualization Fragment: Bar chart type
    ---
        browser log: |
            WARN: WARNING: Dependent keys containing @each only work one level deep. You used the key "__ATTRS_MODEL__._request.metrics.@each.parameters." which is invalid. Please create an intermediary computed property.
            WARN: WARNING: Dependent keys containing @each only work one level deep. You used the key "__ATTRS_MODEL__._request.metrics.@each.parameters." which is invalid. Please create an intermediary computed property.
    ...
ok 358 Chrome 85.0 - [79 ms] - Unit | Model Fragment | BardRequest - Dimension: Model using the Dimension Fragment
ok 359 Chrome 85.0 - [83 ms] - Unit | Model Fragment | BardRequest - Dimension: Validations
ok 360 Chrome 85.0 - [80 ms] - Unit | Model Fragment | BardRequest - Filter: Model using the Filter Fragment
ok 361 Chrome 85.0 - [74 ms] - Unit | Model Fragment | BardRequest - Filter: Get and Set for Contains Filter Fragment
ok 362 Chrome 85.0 - [82 ms] - Unit | Model Fragment | BardRequest - Filter: Computed Value Objects for Contains Filter
ok 363 Chrome 85.0 - [71 ms] - Unit | Model Fragment | BardRequest - Filter: Computed Value Objects
ok 364 Chrome 85.0 - [90 ms] - Unit | Model Fragment | BardRequest - Filter: Validations
ok 365 Chrome 85.0 - [70 ms] - Unit | Model Fragment | BardRequest - Having: Model using the Having Fragment
ok 366 Chrome 85.0 - [78 ms] - Unit | Model Fragment | BardRequest - Having: Computed values
ok 367 Chrome 85.0 - [87 ms] - Unit | Model Fragment | BardRequest - Having: Validations
ok 368 Chrome 85.0 - [44 ms] - Unit | Model Fragment | BardRequest - Interval: Model using the Interval Fragment
ok 369 Chrome 85.0 - [52 ms] - Unit | Model Fragment | BardRequest - Interval: Interval Validations
ok 370 Chrome 85.0 - [65 ms] - Unit | Model Fragment | BardRequest - Logical Table: Model using the Logical Table Fragment
ok 371 Chrome 85.0 - [91 ms] - Unit | Model Fragment | BardRequest - Logical Table: Validations
ok 372 Chrome 85.0 - [67 ms] - Unit | Model | Fragment | BardRequest - Metric: Model using the Metric Fragment
ok 373 Chrome 85.0 - [67 ms] - Unit | Model | Fragment | BardRequest - Metric: Model metric that has parameters
ok 374 Chrome 85.0 - [69 ms] - Unit | Model | Fragment | BardRequest - Metric: Validations
ok 375 Chrome 85.0 - [78 ms] - Unit | Model | Fragment | BardRequest - Sort: Model using the Sort Fragment
ok 376 Chrome 85.0 - [81 ms] - Unit | Model | Fragment | BardRequest - Sort: Validations
ok 377 Chrome 85.0 - [85 ms] - Unit | Model Fragment | BardRequest - Request: Request Model Fragment
ok 378 Chrome 85.0 - [88 ms] - Unit | Model Fragment | BardRequest - Request: Clone Request
ok 379 Chrome 85.0 - [89 ms] - Unit | Model Fragment | BardRequest - Request: Clone request with time-dimension filter and no matching dimension
ok 380 Chrome 85.0 - [97 ms] - Unit | Model Fragment | BardRequest - Request: Clone Request without sort
ok 381 Chrome 85.0 - [82 ms] - Unit | Model Fragment | BardRequest - Request: addMetric
ok 382 Chrome 85.0 - [79 ms] - Unit | Model Fragment | BardRequest - Request: addRequestMetricByModel
ok 383 Chrome 85.0 - [83 ms] - Unit | Model Fragment | BardRequest - Request: addRequestMetricWithParam
ok 384 Chrome 85.0 - [79 ms] - Unit | Model Fragment | BardRequest - Request: removeRequestMetric
ok 385 Chrome 85.0 - [77 ms] - Unit | Model Fragment | BardRequest - Request: removeRequestMetricByModel
ok 386 Chrome 85.0 - [77 ms] - Unit | Model Fragment | BardRequest - Request: removeRequestMetricByModel - multiple metrics
ok 387 Chrome 85.0 - [77 ms] - Unit | Model Fragment | BardRequest - Request: removeRequestMetricWithParam
ok 388 Chrome 85.0 - [76 ms] - Unit | Model Fragment | BardRequest - Request: clearMetrics
ok 389 Chrome 85.0 - [81 ms] - Unit | Model Fragment | BardRequest - Request: addInterval
ok 390 Chrome 85.0 - [78 ms] - Unit | Model Fragment | BardRequest - Request: removeInterval
ok 391 Chrome 85.0 - [77 ms] - Unit | Model Fragment | BardRequest - Request: addDimension
ok 392 Chrome 85.0 - [80 ms] - Unit | Model Fragment | BardRequest - Request: addRequestDimensionByModel
ok 393 Chrome 85.0 - [77 ms] - Unit | Model Fragment | BardRequest - Request: removeRequestDimension
ok 394 Chrome 85.0 - [77 ms] - Unit | Model Fragment | BardRequest - Request: removeRequestDimensionByModel
ok 395 Chrome 85.0 - [75 ms] - Unit | Model Fragment | BardRequest - Request: clearDimensions
ok 396 Chrome 85.0 - [80 ms] - Unit | Model Fragment | BardRequest - Request: addFilters
ok 397 Chrome 85.0 - [75 ms] - Unit | Model Fragment | BardRequest - Request: removeRequestFilter
ok 398 Chrome 85.0 - [79 ms] - Unit | Model Fragment | BardRequest - Request: removeRequestFilterByDimension
ok 399 Chrome 85.0 - [79 ms] - Unit | Model Fragment | BardRequest - Request: updateFilter
ok 400 Chrome 85.0 - [75 ms] - Unit | Model Fragment | BardRequest - Request: addHaving
ok 401 Chrome 85.0 - [75 ms] - Unit | Model Fragment | BardRequest - Request: removeRequestHaving
ok 402 Chrome 85.0 - [78 ms] - Unit | Model Fragment | BardRequest - Request: removeRequestHavingByMetric
ok 403 Chrome 85.0 - [78 ms] - Unit | Model Fragment | BardRequest - Request: updateHaving
ok 404 Chrome 85.0 - [78 ms] - Unit | Model Fragment | BardRequest - Request: dateTime Sort
ok 405 Chrome 85.0 - [79 ms] - Unit | Model Fragment | BardRequest - Request: addSorts
ok 406 Chrome 85.0 - [80 ms] - Unit | Model Fragment | BardRequest - Request: add Parameterized Sort
ok 407 Chrome 85.0 - [82 ms] - Unit | Model Fragment | BardRequest - Request: addSort By Metric Name
ok 408 Chrome 85.0 - [79 ms] - Unit | Model Fragment | BardRequest - Request: removeSort
ok 409 Chrome 85.0 - [80 ms] - Unit | Model Fragment | BardRequest - Request: removeSortByMetricName
ok 410 Chrome 85.0 - [77 ms] - Unit | Model Fragment | BardRequest - Request: removeSortMetricWithParam
ok 411 Chrome 85.0 - [75 ms] - Unit | Model Fragment | BardRequest - Request: removeSortMetricByModel
ok 412 Chrome 85.0 - [77 ms] - Unit | Model Fragment | BardRequest - Request: updateSort
ok 413 Chrome 85.0 - [119 ms] - Unit | Model Fragment | BardRequest - Request: Validations
ok 414 Chrome 85.0 - [96 ms] - Unit | Model Fragment | BardRequest - Request: logicalTable belongs-to validation
ok 415 Chrome 85.0 - [101 ms] - Unit | Model Fragment | BardRequest - Request: dimensions has-many validation
ok 416 Chrome 85.0 - [105 ms] - Unit | Model Fragment | BardRequest - Request: filters has-many validation
ok 417 Chrome 85.0 - [98 ms] - Unit | Model Fragment | BardRequest - Request: metrics has-many validation
ok 418 Chrome 85.0 - [98 ms] - Unit | Model Fragment | BardRequest - Request: intervals has-many validations
ok 419 Chrome 85.0 - [102 ms] - Unit | Model Fragment | BardRequest - Request: sort has-many validation
ok 420 Chrome 85.0 - [103 ms] - Unit | Model Fragment | BardRequest - Request: having has-many validation
ok 421 Chrome 85.0 - [110 ms] - Unit | Model | dashboard: Retrieving Records
ok 422 Chrome 85.0 - [94 ms] - Unit | Model | dashboard: user relationship
ok 423 Chrome 85.0 - [97 ms] - Unit | Model | dashboard: isFavorite
ok 424 Chrome 85.0 - [118 ms] - Unit | Model | dashboard: Cloning Dashboards
skip 425 Chrome 85.0 - [0 ms] - Unit | Model | dashboard: deliveryRuleForUser
ok 426 Chrome 85.0 - [92 ms] - Unit | Model | dashboard widget: tempId
ok 427 Chrome 85.0 - [101 ms] - Unit | Model | dashboard widget: Retrieving Records
ok 428 Chrome 85.0 - [89 ms] - Unit | Model | dashboard widget: Request property
ok 429 Chrome 85.0 - [100 ms] - Unit | Model | dashboard widget: Cloning Dashboard Widgets
ok 430 Chrome 85.0 - [23 ms] - Unit | Model | deliverable item: deliverable item model id
ok 431 Chrome 85.0 - [77 ms] - Unit | Model | delivery rule: Retrieving records
ok 432 Chrome 85.0 - [80 ms] - Unit | Model | delivery rule: user relationship
ok 433 Chrome 85.0 - [91 ms] - Unit | Model | delivery rule: delivered item relationship
    ---
        browser log: |
            WARN: WARNING: Dependent keys containing @each only work one level deep. You used the key "__ATTRS_MODEL__._request.metrics.@each.parameters." which is invalid. Please create an intermediary computed property.
    ...
ok 434 Chrome 85.0 - [100 ms] - Unit | Model | delivery rule: Validations
ok 435 Chrome 85.0 - [33 ms] - Unit | Model | Gauge Visualization Fragment: isValidForRequest
ok 436 Chrome 85.0 - [25 ms] - Unit | Model | Gauge Visualization Fragment: rebuildConfig
ok 437 Chrome 85.0 - [30 ms] - Unit | Model | Line Chart Visualization Fragment: default value
    ---
        browser log: |
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
    ...
ok 438 Chrome 85.0 - [45 ms] - Unit | Model | Line Chart Visualization Fragment: chart type
    ---
        browser log: |
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
    ...
ok 439 Chrome 85.0 - [34 ms] - Unit | Model | Line Chart Visualization Fragment: metric series - metrics
    ---
        browser log: |
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
    ...
ok 440 Chrome 85.0 - [31 ms] - Unit | Model | Line Chart Visualization Fragment: dimension series - metric
    ---
        browser log: |
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
    ...
ok 441 Chrome 85.0 - [31 ms] - Unit | Model | Line Chart Visualization Fragment: dimension series - dimensionOrder
    ---
        browser log: |
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
    ...
ok 442 Chrome 85.0 - [28 ms] - Unit | Model | Line Chart Visualization Fragment: rebuildConfig - metric
    ---
        browser log: |
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
    ...
ok 443 Chrome 85.0 - [30 ms] - Unit | Model | Line Chart Visualization Fragment: rebuildConfig - dimension series - less than max series
    ---
        browser log: |
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
    ...
ok 444 Chrome 85.0 - [29 ms] - Unit | Model | Line Chart Visualization Fragment: rebuildConfig - dimension series - greater than maxSeries
    ---
        browser log: |
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
    ...
ok 445 Chrome 85.0 - [28 ms] - Unit | Model | Line Chart Visualization Fragment: rebuildConfig - dimension series - only metric
    ---
        browser log: |
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
    ...
ok 446 Chrome 85.0 - [28 ms] - Unit | Model | Line Chart Visualization Fragment: rebuildConfig - dimension series - dimension order
    ---
        browser log: |
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
    ...
ok 447 Chrome 85.0 - [28 ms] - Unit | Model | Line Chart Visualization Fragment: rebuildConfig - dimension series - zero dimension series
    ---
        browser log: |
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
    ...
ok 448 Chrome 85.0 - [30 ms] - Unit | Model | Line Chart Visualization Fragment: rebuildConfig - dimension series - missing dimension value description
    ---
        browser log: |
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
    ...
ok 449 Chrome 85.0 - [27 ms] - Unit | Model | Metric Label Visualization Fragment: isValidForRequest
ok 450 Chrome 85.0 - [25 ms] - Unit | Model | Metric Label Visualization Fragment: is Valid for Parameterized Metric Request
ok 451 Chrome 85.0 - [23 ms] - Unit | Model | Metric Label Visualization Fragment: rebuildConfig
ok 452 Chrome 85.0 - [43 ms] - Unit | Adapter | base json adapter: Coalescing find requests
ok 453 Chrome 85.0 - [29 ms] - Unit | Model | Pie Chart Visualization Fragment: default value
    ---
        browser log: |
            WARN: WARNING: Dependent keys containing @each only work one level deep. You used the key "__ATTRS_MODEL__._request.metrics.@each.parameters." which is invalid. Please create an intermediary computed property.
            WARN: WARNING: Dependent keys containing @each only work one level deep. You used the key "__ATTRS_MODEL__._request.metrics.@each.parameters." which is invalid. Please create an intermediary computed property.
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
    ...
ok 454 Chrome 85.0 - [30 ms] - Unit | Model | Pie Chart Visualization Fragment: chart type
    ---
        browser log: |
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
    ...
ok 455 Chrome 85.0 - [31 ms] - Unit | Model | Pie Chart Visualization Fragment: dimension series - metric
    ---
        browser log: |
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
    ...
ok 456 Chrome 85.0 - [29 ms] - Unit | Model | Pie Chart Visualization Fragment: dimension series - dimensionOrder
    ---
        browser log: |
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
    ...
ok 457 Chrome 85.0 - [27 ms] - Unit | Model | Pie Chart Visualization Fragment: rebuildConfig - dimension series - less than max series
    ---
        browser log: |
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
    ...
ok 458 Chrome 85.0 - [27 ms] - Unit | Model | Pie Chart Visualization Fragment: rebuildConfig - dimension series - greater than maxSeries
    ---
        browser log: |
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
    ...
ok 459 Chrome 85.0 - [27 ms] - Unit | Model | Pie Chart Visualization Fragment: rebuildConfig - dimension series - only metric
    ---
        browser log: |
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
    ...
ok 460 Chrome 85.0 - [27 ms] - Unit | Model | Pie Chart Visualization Fragment: rebuildConfig - dimension series - dimension order
    ---
        browser log: |
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
    ...
ok 461 Chrome 85.0 - [27 ms] - Unit | Model | Pie Chart Visualization Fragment: rebuildConfig - dimension series - zero dimension series
    ---
        browser log: |
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
    ...
ok 462 Chrome 85.0 - [27 ms] - Unit | Model | Pie Chart Visualization Fragment: rebuildConfig - dimension series - missing dimension value description
    ---
        browser log: |
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
    ...
ok 463 Chrome 85.0 - [90 ms] - Unit | Model | report: Retrieving records
ok 464 Chrome 85.0 - [82 ms] - Unit | Model | report: Coalescing find requests
ok 465 Chrome 85.0 - [96 ms] - Unit | Model | report: Saving records
ok 466 Chrome 85.0 - [92 ms] - Unit | Model | report: Cloning Reports
ok 467 Chrome 85.0 - [104 ms] - Unit | Model | report: isOwner
ok 468 Chrome 85.0 - [101 ms] - Unit | Model | report: isFavorite
ok 469 Chrome 85.0 - [86 ms] - Unit | Model | report: tempId
ok 470 Chrome 85.0 - [92 ms] - Unit | Model | report: delivery rules relationship
ok 471 Chrome 85.0 - [121 ms] - Unit | Model | report: Validations
ok 472 Chrome 85.0 - [96 ms] - Unit | Model | report: deliveryRuleForUser
ok 473 Chrome 85.0 - [74 ms] - Unit | Model | role: Retrieving records
ok 474 Chrome 85.0 - [77 ms] - Unit | Model | role: Saving records
ok 475 Chrome 85.0 - [98 ms] - Unit | Model | role: Delete records
ok 476 Chrome 85.0 - [24 ms] - Unit | Model | Table Visualization Fragment: default value
    ---
        browser log: |
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
    ...
ok 477 Chrome 85.0 - [34 ms] - Unit | Model | Table Visualization Fragment: valid and invalid table fragment
    ---
        browser log: |
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
            WARN: DEPRECATION: When using @each in a dependent-key or an observer, you can only chain one property level deep after the @each. That is, `__ATTRS_MODEL__._request.metrics.@each.parameters` is allowed but `__ATTRS_MODEL__._request.metrics.@each.parameters.` (which is what you passed) is not.
            
            This was never supported. Currently, the extra segments are silently ignored, i.e. `__ATTRS_MODEL__._request.metrics.@each.parameters.` behaves exactly the same as `__ATTRS_MODEL__._request.metrics.@each.parameters`. In the future, this will throw an error.
            
            If the current behavior is acceptable for your use case, please remove the extraneous segments by changing your key to `__ATTRS_MODEL__._request.metrics.@each.parameters`. Otherwise, please create an intermediary computed property or switch to using tracked properties. [deprecation id: ember-metal.computed-deep-each]
                    at logDeprecationStackTrace (http://localhost:7357/assets/vendor.js:62694:21)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at raiseOnDeprecation (http://localhost:7357/assets/vendor.js:62721:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at handleDeprecationWorkflow (http://localhost:7357/assets/vendor.js:98380:9)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at deprecationCollector (http://localhost:7357/assets/vendor.js:98405:5)
                    at HANDLERS.<computed> (http://localhost:7357/assets/vendor.js:62791:9)
                    at http://localhost:7357/assets/test-support.js:15987:7
    ...
ok 478 Chrome 85.0 - [24 ms] - Unit | Model | Table Visualization Fragment: rebuildConfig
ok 479 Chrome 85.0 - [23 ms] - Unit | Model | Table Visualization Fragment: rebuildConfig with parameterized metrics
ok 480 Chrome 85.0 - [21 ms] - Unit | Model | Table Visualization Fragment: index column by id
ok 481 Chrome 85.0 - [77 ms] - Unit | Model | user: Retrieving records
ok 482 Chrome 85.0 - [79 ms] - Unit | Model | user: Saving records
ok 483 Chrome 85.0 - [62 ms] - Unit | Model | user: Linking Reports to Users
ok 484 Chrome 85.0 - [171 ms] - Unit | Model | user: Favoriting reports
ok 485 Chrome 85.0 - [94 ms] - Unit | Model | user: delivery rules relationship
ok 486 Chrome 85.0 - [82 ms] - Unit | Model | user: roles relationship
ok 487 Chrome 85.0 - [22 ms] - Unit | Manifests | bar chart: bar chart visualization type is valid
ok 488 Chrome 85.0 - [22 ms] - Unit | Manifests | goal gauge: goal gauge visualization type is valid
ok 489 Chrome 85.0 - [22 ms] - Unit | Manifests | line chart: line chart visualization type is valid
ok 490 Chrome 85.0 - [23 ms] - Unit | Manifests | metric label: metric label visualization type is valid
ok 491 Chrome 85.0 - [22 ms] - Unit | Manifests | pie chart: pie chart visualization type is valid
ok 492 Chrome 85.0 - [24 ms] - Unit | Serializer | Interval Fragment: serializing record
ok 493 Chrome 85.0 - [21 ms] - Unit | Serializer | Interval Fragment: normalizing record
ok 494 Chrome 85.0 - [23 ms] - Unit | Serializer | Metric Fragment: serializing record
ok 495 Chrome 85.0 - [75 ms] - Unit | Serializer | Request: having and sort serialization
ok 496 Chrome 85.0 - [70 ms] - Unit | Serializer | Request: having and sort deserialization
ok 497 Chrome 85.0 - [74 ms] - Unit | Serializer | Request: multidatasource namespace normalization
ok 498 Chrome 85.0 - [61 ms] - Unit | Serializer | dashboard: _addLinks
ok 499 Chrome 85.0 - [60 ms] - Unit | Serializer | dashboard: normalize
ok 500 Chrome 85.0 - [85 ms] - Unit | Serializer | dashboard: serialize
ok 501 Chrome 85.0 - [37 ms] - Unit | Serializer | goal gauge: normalize
ok 502 Chrome 85.0 - [39 ms] - Unit | Serializer | line chart: normalize
ok 503 Chrome 85.0 - [37 ms] - Unit | Serializer | metric label: normalize
ok 504 Chrome 85.0 - [39 ms] - Unit | Serializer | pie chart: normalize
ok 505 Chrome 85.0 - [39 ms] - Unit | Serializer | table: normalize
ok 506 Chrome 85.0 - [22 ms] - Unit | Service | action-dispatcher: dispatch calls the correct action
ok 507 Chrome 85.0 - [22 ms] - Unit | Service | action-dispatcher: dispatch can call an action on multiple consumers
ok 508 Chrome 85.0 - [79 ms] - Unit | Service | compression: compress and decompress
ok 509 Chrome 85.0 - [78 ms] - Unit | Service | compression: compressModel and decompressModel
ok 510 Chrome 85.0 - [70 ms] - Unit | Service | compression: compressModel: id is required
ok 511 Chrome 85.0 - [69 ms] - Unit | Service | compression: _pushPayload
ok 512 Chrome 85.0 - [38 ms] - Unit | Service | user: getUser - invoked without userId param
ok 513 Chrome 85.0 - [37 ms] - Unit | Service | user: getUser - invoked with userId param
ok 514 Chrome 85.0 - [57 ms] - Unit | Service | user: findUser - invoked without userId param
ok 515 Chrome 85.0 - [54 ms] - Unit | Service | user: findUser - invoked with userId param
ok 516 Chrome 85.0 - [48 ms] - Unit | Service | user: register - unregistered logged-in user
ok 517 Chrome 85.0 - [49 ms] - Unit | Service | user: register - handle Server error
ok 518 Chrome 85.0 - [53 ms] - Unit | Service | user: findOrRegister - unregistered user
ok 519 Chrome 85.0 - [49 ms] - Unit | Service | user: findOrRegister - registered user not present in store
ok 520 Chrome 85.0 - [48 ms] - Unit | Service | user: findOrRegister - handle Server errors
ok 521 Chrome 85.0 - [68 ms] - Unit | Transform | Dimension: serialize and deserialize
ok 522 Chrome 85.0 - [58 ms] - Unit | Transform | Dimension: deserialize with "." in id
ok 523 Chrome 85.0 - [59 ms] - Unit | Transform | Dimension: Do not cause crash when metadata is not available
ok 524 Chrome 85.0 - [69 ms] - Unit | Transform | Metric: serialize and deserialize
ok 525 Chrome 85.0 - [59 ms] - Unit | Transform | Metric: deserialize with "." in id
ok 526 Chrome 85.0 - [71 ms] - Unit | Transform | Metric: datetime test
ok 527 Chrome 85.0 - [22 ms] - Unit | Transform | moment: deserialize
ok 528 Chrome 85.0 - [21 ms] - Unit | Transform | moment: serialize
ok 529 Chrome 85.0 - [73 ms] - Unit | Transform | Table: serialize and deserialize
ok 530 Chrome 85.0 - [0 ms] - Unit | Utils | Chart Data: groupDataByDimensions
ok 531 Chrome 85.0 - [0 ms] - Unit | Utils | Chart Data: buildSeriesKey
ok 532 Chrome 85.0 - [1 ms] - Unit | Utils | Chart Data: getSeriesName
ok 533 Chrome 85.0 - [1 ms] - Unit | Utils | Chart Data: chartTypeForRequest
ok 534 Chrome 85.0 - [1 ms] - Unit | Utils | Chart Data: getRequestMetrics
ok 535 Chrome 85.0 - [0 ms] - Unit | Utils | Chart Data: getRequestDimensions
ok 536 Chrome 85.0 - [1 ms] - Unit | Utils | Chart Data: buildDimensionSeriesValues
ok 537 Chrome 85.0 - [1 ms] - Unit | Utils | Chart Data: test get translation
ok 538 Chrome 85.0 - [1 ms] - Unit | Utils | DataGroup Class: Construction
ok 539 Chrome 85.0 - [0 ms] - Unit | Utils | DataGroup Class: getDataForKey
ok 540 Chrome 85.0 - [0 ms] - Unit | Utils | DataGroup Class: getKeys
ok 541 Chrome 85.0 - [1 ms] - Unit | Utils | Duration Class: Construction of duration objects
ok 542 Chrome 85.0 - [0 ms] - Unit | Utils | Duration Class: humanize
ok 543 Chrome 85.0 - [1 ms] - Unit | Utils | Duration Class: toString
ok 544 Chrome 85.0 - [1 ms] - Unit | Utils | Duration Class: compare
ok 545 Chrome 85.0 - [0 ms] - Unit | Utils | Duration Class: isEqual
ok 546 Chrome 85.0 - [1 ms] - Unit | Utils | Duration Class: isAll
ok 547 Chrome 85.0 - [0 ms] - Unit | Utils | Duration Class: getAllString static method
ok 548 Chrome 85.0 - [0 ms] - Unit | Utils | Duration Class: all static method
ok 549 Chrome 85.0 - [0 ms] - Unit | Utils | Duration Class: isDuration static method
ok 550 Chrome 85.0 - [0 ms] - Unit | Utils | Duration Class: parseDuration
ok 551 Chrome 85.0 - [0 ms] - Unit | Utils | Duration Class: isIsoDurationString
ok 552 Chrome 85.0 - [0 ms] - Unit | Utils | Interval Class: Construction
ok 553 Chrome 85.0 - [0 ms] - Unit | Utils | Interval Class: isEqual
ok 554 Chrome 85.0 - [0 ms] - Unit | Utils | Interval Class: isAscending
ok 555 Chrome 85.0 - [1 ms] - Unit | Utils | Interval Class: diffForTimePeriod
ok 556 Chrome 85.0 - [1 ms] - Unit | Utils | Interval Class: asMoments
ok 557 Chrome 85.0 - [1 ms] - Unit | Utils | Interval Class: asMomentsForTimePeriod
ok 558 Chrome 85.0 - [0 ms] - Unit | Utils | Interval Class: asMomentsForTimePeriod with current and next for time period
ok 559 Chrome 85.0 - [0 ms] - Unit | Utils | Interval Class: asMomentsForTimePeriod - same start and end date
ok 560 Chrome 85.0 - [0 ms] - Unit | Utils | Interval Class: asIntervalForTimePeriod
ok 561 Chrome 85.0 - [0 ms] - Unit | Utils | Interval Class: asIntervalForTimePeriod - same start and end date
ok 562 Chrome 85.0 - [1 ms] - Unit | Utils | Interval Class: asStrings
ok 563 Chrome 85.0 - [1 ms] - Unit | Utils | Interval Class: _stringFromProperty
ok 564 Chrome 85.0 - [1 ms] - Unit | Utils | Interval Class: fromString
ok 565 Chrome 85.0 - [0 ms] - Unit | Utils | Interval Class: _isAcceptedType
ok 566 Chrome 85.0 - [0 ms] - Unit | Utils | Interval Class: isInterval
ok 567 Chrome 85.0 - [2 ms] - Unit | Utils | Custom Computed Properties Utils: computedSetDiff
ok 568 Chrome 85.0 - [0 ms] - Unit | Utils | Data: top n values
ok 569 Chrome 85.0 - [1 ms] - Unit | Utils | Data: top n with undefined fields
ok 570 Chrome 85.0 - [0 ms] - Unit | Utils | Data: most recent data
ok 571 Chrome 85.0 - [0 ms] - Unit | Utils | Data: data by dimensions
ok 572 Chrome 85.0 - [0 ms] - Unit | Utils | Data: max data by dimensions
ok 573 Chrome 85.0 - [0 ms] - Unit | Utils | Data: best dimension field
ok 574 Chrome 85.0 - [1 ms] - Unit | Utils | DateUtils: getDatesForInterval
ok 575 Chrome 85.0 - [0 ms] - Unit | Utils | DateUtils: getFirstDayOfPrevIsoDateTimePeriod - date format provided
ok 576 Chrome 85.0 - [0 ms] - Unit | Utils | DateUtils: getLastDayOfPrevIsoDateTimePeriod - unit tests
ok 577 Chrome 85.0 - [1 ms] - Unit | Utils | DateUtils: getFirstDayEpochIsoDateTimePeriod - Epoc date as mid of DateTimePeriod
ok 578 Chrome 85.0 - [1 ms] - Unit | Utils | DateUtils: getFirstDayEpochIsoDateTimePeriod - Epoc date as start of DateTimePeriod
ok 579 Chrome 85.0 - [2 ms] - Unit | Utils | DateUtils: getFirstDayOfIsoDateTimePeriod - unit tests
ok 580 Chrome 85.0 - [1 ms] - Unit | Utils | DateUtils: getLastDayOfIsoDateTimePeriod - unit tests
ok 581 Chrome 85.0 - [0 ms] - Unit | Utils | DateUtils: getIsoDateTimePeriod - unit tests
ok 582 Chrome 85.0 - [1 ms] - Unit | Utils | DurationUtils: subtractDurationFromDate
ok 583 Chrome 85.0 - [1 ms] - Unit | Utils | DurationUtils: isDurationOverAYear
ok 584 Chrome 85.0 - [2 ms] - Unit | Utils | DurationUtils: computeStartOfInterval
ok 585 Chrome 85.0 - [0 ms] - Unit | Utils | Error: data timeout message - unit test
ok 586 Chrome 85.0 - [0 ms] - Unit | Utils | Error: bard message
ok 587 Chrome 85.0 - [1 ms] - Unit | Utils | Error: no message
ok 588 Chrome 85.0 - [0 ms] - Unit | Utils | Error: _getErrorText
ok 589 Chrome 85.0 - [1 ms] - Unit | Utils | Pagination Utils: getPaginatedRecords
ok 590 Chrome 85.0 - [0 ms] - Unit | Utility | persistence error: getApiErrMsg
ok 591 Chrome 85.0 - [2 ms] - Unit | Utils | Search Utils: getPartialMatchWeight
ok 592 Chrome 85.0 - [0 ms] - Unit | Utils | Search Utils: getExactMatchWeight
ok 593 Chrome 85.0 - [1 ms] - Unit | Utils | Search Utils: searchRecords
ok 594 Chrome 85.0 - [3 ms] - Unit | Utils | Search Utils: searchDimensionRecords
ok 595 Chrome 85.0 - [25 ms] - Unit | Validator | array-empty-value: validate array-empty-value
ok 596 Chrome 85.0 - [22 ms] - Unit | Validator | array-number: validate array-number
ok 597 Chrome 85.0 - [22 ms] - Unit | Validator | chart-type: validate chart-type
ok 598 Chrome 85.0 - [21 ms] - Unit | Validator | interval: no options
ok 599 Chrome 85.0 - [22 ms] - Unit | Validator | interval: ascending
ok 600 Chrome 85.0 - [22 ms] - Unit | Validator | interval: next
ok 601 Chrome 85.0 - [22 ms] - Unit | Validator | recipients: validate recipients
ok 602 Chrome 85.0 - [23 ms] - Unit | Validator | request-dimension-order: validate request-dimension-order
ok 603 Chrome 85.0 - [22 ms] - Unit | Validator | request-filters: validate request-filters
ok 604 Chrome 85.0 - [22 ms] - Unit | Validator | request-metric-exist: validate request-metric-exist
ok 605 Chrome 85.0 - [22 ms] - Unit | Validator | request-metrics: validate request-metrics
ok 606 Chrome 85.0 - [1 ms] - ember-qunit: Ember.onerror validation: Ember.onerror is functioning properly

1..606
# tests 606
# pass  603
# skip  2
# todo  0
# fail  1
